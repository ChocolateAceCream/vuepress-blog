import{_ as d}from"./chunks/ArticleMetadata.C686XTyZ.js";import{_ as k,m as n,a as g,e as i,x as s,u as r,B as F,ah as l,o as p,p as y,q as u}from"./chunks/framework.BuAcqOzq.js";import"./chunks/theme.CZ1aM-aS.js";const m="/vuepress-blog/assets/1.Cfz8xEry.png",_="/vuepress-blog/assets/2.Csrjg_Bp.png",b="/vuepress-blog/assets/3.DNLwpXRP.png",q=JSON.parse('{"title":"OpenWrt bypass","description":"","frontmatter":{"title":"OpenWrt bypass","author":"ChocolateAceCream","date":"2023/04/06 19:00","isTop":false,"categories":["IoT"],"tags":["Docker","OpenWrt","Raspberry Pi"]},"headers":[],"relativePath":"categories/IoT/2023/04/06/OpenWrt_bypass.md","filePath":"categories/IoT/2023/04/06/OpenWrt_bypass.md","lastUpdated":1714716219000}'),D={name:"categories/IoT/2023/04/06/OpenWrt_bypass.md"},w={id:"install-openwrt-bypass-in-docker",tabindex:"-1"},f=i("a",{class:"header-anchor",href:"#install-openwrt-bypass-in-docker","aria-label":'Permalink to "Install OpenWrt bypass in docker <Badge text="OpenWrt" type="warning" />"'},"​",-1),C=l(`<h5 id="开启此网卡混杂模式" tabindex="-1">开启此网卡混杂模式 <a class="header-anchor" href="#开启此网卡混杂模式" aria-label="Permalink to &quot;开启此网卡混杂模式&quot;">​</a></h5><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># eth0 is the network interface of the hardware</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">ip</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> link</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> eth0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> promisc</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> on</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># set MACVLAN</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> network</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> create</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> macvlan</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --subnet=192.168.3.0/24</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --gateway=192.168.3.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> parent=eth0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> macnet</span></span></code></pre></div><p>-d 指定 Docker 网络 driver --subnet 指定 macvlan 网络所在的网络 --gateway 指定网关 -o parent 指定用来分配 macvlan 网络的物理网卡 macnet: name of macvlan</p><br>`,4),v=i("br",null,null,-1),x=l(`<div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># /etc/config/network</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">config interface &#39;lan&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        option type &#39;bridge&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        option ifname &#39;eth0&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        option proto &#39;static&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        option ipaddr &#39;192.168.3.254&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        option netmask &#39;255.255.255.0&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        option ip6assign &#39;60&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        option gateway &#39;192.168.3.1&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        option broadcast &#39;192.168.3.255&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        option dns &#39;192.168.3.1&#39;</span></span></code></pre></div><p>ipaddr: ip of your hardware gateway: ip of your main router dns: ip for your main router</p><p><em><strong>P.S</strong></em> remember to add fixed ip for your hardware in main router <br></p><h5 id="restart-network-card-then-you-can-visit-openwrt-portal-at-ipaddr" tabindex="-1">restart network card, then you can visit openwrt portal at ipaddr <a class="header-anchor" href="#restart-network-card-then-you-can-visit-openwrt-portal-at-ipaddr" aria-label="Permalink to &quot;restart network card, then you can visit openwrt portal at ipaddr&quot;">​</a></h5><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">/etc/init.d/network</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> restart</span></span></code></pre></div><br><h5 id="login-to-the-ip-of-your-target-ipaddr-using" tabindex="-1">login to the ip of your target ipaddr using: <a class="header-anchor" href="#login-to-the-ip-of-your-target-ipaddr-using" aria-label="Permalink to &quot;login to the ip of your target ipaddr using:&quot;">​</a></h5><p>name: <strong>root</strong> password: <strong>password</strong></p><ul><li>edit lan <img src="`+m+'" alt="图片alt" title="图片title"></li><li>turn off dhcp (make sure dhcp is turned on in your main router) <img src="'+_+'" alt="图片alt" title="图片title"></li><li>connect your device to the main router manually, set gateway to ipaddr and dns to your main router ip (also remember to <strong>fix your device ip</strong> in main router) <img src="'+b+`" alt="图片alt" title="图片title"></li></ul><h3 id="change-source" tabindex="-1">change source <a class="header-anchor" href="#change-source" aria-label="Permalink to &quot;change source&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">src/gz</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> openwrt_core</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://mirrors.aliyun.com/openwrt/releases/22.03.0-rc6/targets/armvirt/64/packages/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">src/gz</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> openwrt_base</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://mirrors.aliyun.com/openwrt/releases/22.03.0-rc6/packages/aarch64_cortex-a53/base</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">src/gz</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> openwrt_luci</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://mirrors.aliyun.com/openwrt/releases/22.03.0-rc6/packages/aarch64_cortex-a53/luci</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">src/gz</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> openwrt_packages</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://mirrors.aliyun.com/openwrt/releases/22.03.0-rc6/packages/aarch64_cortex-a53/packages</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">src/gz</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> openwrt_routing</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://mirrors.aliyun.com/openwrt/releases/22.03.0-rc6/packages/aarch64_cortex-a53/routing</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">src/gz</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> openwrt_telephony</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://mirrors.aliyun.com/openwrt/releases/22.03.0-rc6/packages/aarch64_cortex-a53/telephony</span></span></code></pre></div>`,11);function T(a,A,O,P,B,W){const o=n("Badge"),h=d,c=n("ClientOnly");return p(),g("div",null,[i("h1",w,[s("Install OpenWrt bypass in docker "),r(o,{text:"OpenWrt",type:"warning"}),s(),f]),r(c,null,{default:F(()=>{var t,e;return[(((t=a.$frontmatter)==null?void 0:t.aside)??!0)&&(((e=a.$frontmatter)==null?void 0:e.showArticleMetadata)??!0)?(p(),y(h,{key:0,article:a.$frontmatter},null,8,["article"])):u("",!0)]}),_:1}),C,s(" ##### pull the right image based on arch of hardware, then run the image in docker ```bash docker run --restart always --name openwrt -d --network macnet --ip 192.168.3.254 --privileged buddyfly/openwrt-aarch64:latest /sbin/init ``` -d: run in background --privileged: assign system privilege to the container /sbin/init: auto run the init script after container started "),v,s(" ##### enter the container and change lan config "),x])}const S=k(D,[["render",T]]);export{q as __pageData,S as default};
