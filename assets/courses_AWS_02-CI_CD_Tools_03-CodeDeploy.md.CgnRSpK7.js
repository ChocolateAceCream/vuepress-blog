import{_ as o}from"./chunks/ArticleMetadata.Dw3Glavm.js";import{_ as d,m as e,a as c,e as p,x as n,u as t,B as y,ah as g,o as l,p as A,q as u}from"./chunks/framework.BuAcqOzq.js";import"./chunks/theme.BFkC6-TX.js";const D="/vuepress-blog/assets/rolling_deployment.Dj3IYASG.png",f="/vuepress-blog/assets/blue_green_deployment.CGbwLoxQ.png",m="/vuepress-blog/assets/automate_approval_process.xVeSv0Ti.png",L=JSON.parse('{"title":"CodeDeploy","description":"","frontmatter":{"title":"CodeDeploy","author":"ChocolateAceCream","date":"2024/05/06 16:25","categories":["AWS"],"tags":["AWS","CI/CD","CodeDeploy"]},"headers":[],"relativePath":"courses/AWS/02-CI_CD_Tools/03-CodeDeploy.md","filePath":"courses/AWS/02-CI_CD_Tools/03-CodeDeploy.md","lastUpdated":1715492515000}'),C={name:"courses/AWS/02-CI_CD_Tools/03-CodeDeploy.md"},F={id:"aws-codedeploy",tabindex:"-1"},B=p("a",{class:"header-anchor",href:"#aws-codedeploy","aria-label":'Permalink to "AWS CodeDeploy <Badge text="CodeDeploy" type="warning" />"'},"​",-1),b=g('<h2 id="rolling-deployment" tabindex="-1">Rolling deployment <a class="header-anchor" href="#rolling-deployment" aria-label="Permalink to &quot;Rolling deployment&quot;">​</a></h2><p>Your production fleet will run both the new and existing software versions during the deployment process.</p><h4 id="pros" tabindex="-1">Pros <a class="header-anchor" href="#pros" aria-label="Permalink to &quot;Pros&quot;">​</a></h4><ul><li>zero downtime (If the upgrade failed)</li><li>lower overall risk of bringing down entire production env</li><li>minimize deployment costs</li></ul><h4 id="cons" tabindex="-1">Cons <a class="header-anchor" href="#cons" aria-label="Permalink to &quot;Cons&quot;">​</a></h4><ul><li>complexity increased since you need to handle two versions operating at once in the same env.</li><li>Rolling back to previous version is hard, either redeploy old version or fix bugs manually</li><li>take longer to deploy all hosts in large env</li></ul><p><img src="'+D+'" alt="Rolling deployment"></p><h2 id="blue-green-deployment" tabindex="-1">Blue/Green deployment <a class="header-anchor" href="#blue-green-deployment" aria-label="Permalink to &quot;Blue/Green deployment&quot;">​</a></h2><p>an entirely new environment containing the updated application is created, and traffic is shifted over to the new environment <img src="'+f+`" alt="blue_green_deployment"></p><h2 id="health-checks" tabindex="-1">Health Checks <a class="header-anchor" href="#health-checks" aria-label="Permalink to &quot;Health Checks&quot;">​</a></h2><p>determine if a deployment was successful or the app is working as intended.</p><h3 id="liveness-checks" tabindex="-1">Liveness checks <a class="header-anchor" href="#liveness-checks" aria-label="Permalink to &quot;Liveness checks&quot;">​</a></h3><ul><li>TCP port checks</li><li>HTTP 200 response checks</li><li>basic infra inspection, such as network reachability</li></ul><h3 id="local-health-checks" tabindex="-1">Local health checks <a class="header-anchor" href="#local-health-checks" aria-label="Permalink to &quot;Local health checks&quot;">​</a></h3><ul><li>Disk IO</li><li>proxy checks</li><li>monitoring daemons checks</li></ul><h3 id="dependency-health-checks" tabindex="-1">Dependency health checks <a class="header-anchor" href="#dependency-health-checks" aria-label="Permalink to &quot;Dependency health checks&quot;">​</a></h3><ul><li>update mechanism might be broken on a server so server can out of sync with its peers.</li><li>peer communication inability.</li><li>Deadlocks, memory leaks or state corruption bugs</li></ul><h3 id="anomaly-detection" tabindex="-1">Anomaly detection <a class="header-anchor" href="#anomaly-detection" aria-label="Permalink to &quot;Anomaly detection&quot;">​</a></h3><ul><li>clock skew: peer clock un-sync</li><li>peer running outdated code</li></ul><h2 id="deployment-configurations" tabindex="-1">Deployment Configurations <a class="header-anchor" href="#deployment-configurations" aria-label="Permalink to &quot;Deployment Configurations&quot;">​</a></h2><h4 id="codedeploy-predefined-deployment-configurations" tabindex="-1">CodeDeploy Predefined Deployment Configurations <a class="header-anchor" href="#codedeploy-predefined-deployment-configurations" aria-label="Permalink to &quot;CodeDeploy Predefined Deployment Configurations&quot;">​</a></h4><h5 id="amazon-ec2-and-on-premises" tabindex="-1">Amazon EC2 and on premises <a class="header-anchor" href="#amazon-ec2-and-on-premises" aria-label="Permalink to &quot;Amazon EC2 and on premises&quot;">​</a></h5><ul><li>CodeDeployDefault.AllAtOnce: Attempts to deploy an application revision to as many instances as possible at once</li><li>CodeDeployDefault.HalfAtATime: Deploys to up to half of the instances at a time (with fractions rounded down)</li><li>CodeDeployDefault.OneAtATime: Deploys the application revision to only one instance at a time Amazon ECS</li><li>CodeDeployDefault.ECSLinear10PercentEvery1Minutes: Shifts 10 percent of traffic every minute until all traffic is shifted</li><li>CodeDeployDefault.ECSLinear10PercentEvery3Minutes: Shifts 10 percent of traffic every 3 minutes until all traffic is shifted</li><li>CodeDeployDefault.ECSCanary10Percent5Minutes: Shifts 10 percent of traffic in the first increment, and the remaining 90 percent is deployed 5 minutes later</li><li>CodeDeployDefault.ECSCanary10Percent15Minutes: Shifts 10 percent of traffic in the first increment, and the remaining 90 percent is deployed 15 minutes later</li><li>CodeDeployDefault.ECSAllAtOnce: Shifts all traffic to the updated Amazon ECS container at once Lambda</li><li>CodeDeployDefault.LambdaLinear10PercentEvery1Minute: Shifts 10 percent of traffic every minute until all traffic is shifted</li><li>CodeDeployDefault.LambdaLinear10PercentEvery2Minutes: Shifts 10 percent of traffic every 2 minutes until all traffic is shifted</li><li>CodeDeployDefault.LambdaLinear10PercentEvery3Minutes: Shifts 10 percent of traffic every 3 minutes until all traffic is shifted</li><li>CodeDeployDefault.LambdaLinear10PercentEvery10Minutes: Shifts 10 percent of traffic every 10 minutes until all traffic is shifted</li><li>CodeDeployDefault.LambdaCanary10Percent5Minutes: Shifts 10 percent of traffic in the first increment, and the remaining 90 percent is deployed 5 minutes later</li><li>CodeDeployDefault.LambdaCanary10Percent10Minutes: Shifts 10 percent of traffic in the first increment, and the remaining 90 percent is deployed 10 minutes later</li><li>CodeDeployDefault.LambdaCanary10Percent15Minutes: Shifts 10 percent of traffic in the first increment, and the remaining 90 percent is deployed 15 minutes later</li><li>CodeDeployDefault.LambdaCanary10Percent30Minutes: Shifts 10 percent of traffic in the first increment, and the remaining 90 percent is deployed 30 minutes later</li><li>CodeDeployDefault.LambdaAllAtOnce: Shifts all traffic to the updated Lambda functions at once</li></ul><h2 id="deployment-types" tabindex="-1">Deployment Types <a class="header-anchor" href="#deployment-types" aria-label="Permalink to &quot;Deployment Types&quot;">​</a></h2><h3 id="blue-green-deployment-1" tabindex="-1">Blue/Green deployment <a class="header-anchor" href="#blue-green-deployment-1" aria-label="Permalink to &quot;Blue/Green deployment&quot;">​</a></h3><ul><li>testing on green env without disrupting the blue env</li><li>switching to green env with no downtime. It only requires the redirecting of user traffic</li><li>rollback from green to blue is easy</li></ul><h4 id="steps-for-blue-green-deployment-in-ec2" tabindex="-1">Steps for blue/green deployment in EC2 <a class="header-anchor" href="#steps-for-blue-green-deployment-in-ec2" aria-label="Permalink to &quot;Steps for blue/green deployment in EC2&quot;">​</a></h4><ol><li>create green env</li><li>deploy new version of app in green env</li><li>redirect traffic to green env</li><li>deregister blue env or keep it for other uses</li></ol><h4 id="steps-for-blue-green-deployment-on-lambda" tabindex="-1">Steps for blue/green deployment on Lambda <a class="header-anchor" href="#steps-for-blue-green-deployment-on-lambda" aria-label="Permalink to &quot;Steps for blue/green deployment on Lambda&quot;">​</a></h4><ul><li>no need for extra config, all lambda are deployed in blue/green manner</li><li>you can specify a lambda function that perform validation tests and choose the way traffic shifting occurs</li></ul><h4 id="steps-for-blue-green-deployment-on-ecs" tabindex="-1">Steps for blue/green deployment on ECS <a class="header-anchor" href="#steps-for-blue-green-deployment-on-ecs" aria-label="Permalink to &quot;Steps for blue/green deployment on ECS&quot;">​</a></h4><ul><li>traffic is shifted from the task set with original version of APP in ECS service to replacement task set in the same service</li><li>traffic shifting can be linear or canary through deployment config</li><li>load balancer are used to reroute traffic</li><li>can run validation tests with a test listener that used to serve traffic to the replacement task set</li></ul><h2 id="appspec" tabindex="-1">AppSpec <a class="header-anchor" href="#appspec" aria-label="Permalink to &quot;AppSpec&quot;">​</a></h2><p>The AppSpec file is used to manage each deployment as a series of lifecycle event hooks</p><h4 id="sample-files" tabindex="-1">sample files <a class="header-anchor" href="#sample-files" aria-label="Permalink to &quot;sample files&quot;">​</a></h4><ul><li>Amazon ECS</li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0.0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># Specifies info about the ECS APP to deploy</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  ecs-service-specifications</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">hooks</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  deployment-lifecycle-event-mappings</span></span></code></pre></div><ul><li>Lambda</li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0.0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># Specifies info about the lambda function to deploy</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  lambda-function-specifications</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">hooks</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  deployment-lifecycle-event-mappings</span></span></code></pre></div><ul><li>EC2 or on-premises</li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0.0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">os</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">operating-system-name</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> # linux or windows</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">files</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  source-destination-files-mappings</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> #files that should be copied to the instance during the deployment&#39;s install event</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">permissions</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  # which special permissions should be apply to the files that copied to the instance</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  permissions-specifications</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">hooks</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  deployment-lifecycle-event-mappings</span></span></code></pre></div><h3 id="lifecycle-hooks" tabindex="-1">LifeCycle hooks <a class="header-anchor" href="#lifecycle-hooks" aria-label="Permalink to &quot;LifeCycle hooks&quot;">​</a></h3><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0.0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">Resources</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">TargetService</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      Type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">AWS::ECS::Service</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      Properties</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        TaskDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;arn:aws:ecs:us-east-1:111222333444:task-definition/my-task-definition-family-name:1&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        LoadBalancerInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          ContainerName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;SampleApplicationName&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          ContainerPort</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">80</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># Optional properties</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        PlatformVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;LATEST&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        NetworkConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          AwsvpcConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">            Subnets</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;subnet-1234abcd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;subnet-5678abcd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">            SecurityGroups</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sg-12345678&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">            AssignPublicIp</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;ENABLED&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">Hooks</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">BeforeInstall</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;LambdaFunctionToValidateBeforeInstall&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">AfterInstall</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;LambdaFunctionToValidateAfterTraffic&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">AfterAllowTestTraffic</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;LambdaFunctionToValidateAfterTestTrafficStarts&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">BeforeAllowTraffic</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;LambdaFunctionToValidateBeforeAllowingProductionTraffic&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">AfterAllowTraffic</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;LambdaFunctionToValidateAfterAllowingProductionTraffic&quot;</span></span></code></pre></div><ul><li>BeforeInstall: before ECS app is installed on the replacement task set</li><li>AfterInstall: after install but before it receives any traffic</li><li>AfterAllowTestTraffic: after app starts receiving traffic from the test listener, which runs validation tests to determine if the deployment continues.</li><li>BeforeAllowTraffic: after tests completed, but before production traffic is served</li><li>AfterAllowTraffic: after production traffic is served</li></ul><p><a href="/vuepress-blog/pdf/2024/05/07/AppSpec_Hooks_by_Deployment.pdf">AppSpec_Hooks_by_Deployment</a></p><h5 id="sample-nodejs-lambda-function" tabindex="-1">Sample nodejs lambda function <a class="header-anchor" href="#sample-nodejs-lambda-function" aria-label="Permalink to &quot;Sample nodejs lambda function&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;use strict&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> AWS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;aws-sdk&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> codedeploy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> AWS</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">CodeDeploy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">({apiVersion: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;2014-10-06&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> exports</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">handler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Entering AfterAllowTestTraffic hook.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 	// Read the DeploymentId and LifecycleEventHookExecutionId from the event payload</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> deploymentId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> event.DeploymentId;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> 	var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> lifecycleEventHookExecutionId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> event.LifecycleEventHookExecutionId;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> 	var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> validationTestResult </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Failed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 	// Perform AfterAllowTestTraffic validation tests here. Set the test result</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 	// to &quot;Succeeded&quot; for this tutorial.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;This is where AfterAllowTestTraffic validation tests happen.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 	validationTestResult </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Succeeded&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 	// Complete the AfterAllowTestTraffic hook by sending CodeDeploy the validation status</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> 	var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> params </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 		deploymentId: deploymentId,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 		lifecycleEventHookExecutionId: lifecycleEventHookExecutionId,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 		status: validationTestResult </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// status can be &#39;Succeeded&#39; or &#39;Failed&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 	};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 	// Pass AWS CodeDeploy the prepared validation test results.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 	codedeploy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">putLifecycleEventHookExecutionStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(params, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> 		if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 			// Validation failed.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 			console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;AfterAllowTestTraffic validation tests failed&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 			console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(err, err.stack);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> 			callback</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;CodeDeploy Status update failed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 		} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 			// Validation succeeded.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 			console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;AfterAllowTestTraffic validation tests succeeded&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> 			callback</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;AfterAllowTestTraffic validation tests succeeded&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 	});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span></code></pre></div><h2 id="canary-deployment" tabindex="-1">Canary Deployment <a class="header-anchor" href="#canary-deployment" aria-label="Permalink to &quot;Canary Deployment&quot;">​</a></h2><p>test your canary with live production traffic. Traffic is shifted in two increments:</p><ol><li>the first shifts some traffic to the canary</li><li>the next shifts all traffic to the new app at the end of the selected interval If your technical or business metrics passed the canary test, continue with the deployment or else rollback gracefully</li></ol><p>sample config</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">Resources</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;"> MyLambdaFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">   Type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">AWS::Serverless::Function</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">   Properties</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">     Handler</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">index.handler</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">     Runtime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">nodejs12.x</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">     CodeUri</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s3://bucket/code.zip</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">     AutoPublishAlias</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">live</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">     DeploymentPreference</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">       Type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Canary10Percent10Minutes</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">       Alarms</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">         # A list of alarms that you want to monitor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">         - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!Ref</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> AliasErrorMetricGreaterThanZeroAlarm</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">         - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!Ref</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> LatestVersionErrorMetricGreaterThanZeroAlarm</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">       Hooks</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">         # Validation Lambda functions that are run before &amp; after traffic shifting</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">         PreTraffic</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!Ref</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> PreTrafficLambdaFunction</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">         PostTraffic</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!Ref</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> PostTrafficLambdaFunction</span></span></code></pre></div><h3 id="synthetic-testing-with-canaries" tabindex="-1">Synthetic testing with canaries <a class="header-anchor" href="#synthetic-testing-with-canaries" aria-label="Permalink to &quot;Synthetic testing with canaries&quot;">​</a></h3><p>Synthetic testing is automated testing that emulates user activity on your application every minute of every day.</p><p>CloudWatch Synthetics&#39; canaries are Node.js scripts. They create Lambda functions in your account that use Node.js as a framework. Canaries can use the Puppeteer Node.js library to perform functions on your applications.</p><p>By default, canaries create CloudWatch metrics in the CloudWatchSynthetics namespace. They create metrics with the names SuccessPercent, Failed, and Duration. These metrics have CanaryName as a dimension.</p><h2 id="manual-and-automatic-approvals" tabindex="-1">Manual and automatic approvals <a class="header-anchor" href="#manual-and-automatic-approvals" aria-label="Permalink to &quot;Manual and automatic approvals&quot;">​</a></h2><ul><li>reject = fail</li><li>no one approves in 7 days = reject Since manual approval may takes longer so automatic pipeline is recommended here <img src="`+m+`" alt="automate_approval_process"> when application reaches the approval stage, codepipleline can send an event to an Amazon SNS topic, which will then sends out notifications to all necessary resources including lambda function that will perform testing</li></ul><p>example of lambda function that will approve an approval action</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> boto3.client(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;codepipeline&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> client.get_pipeline_state(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">pipeline_name)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">approve </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _json_parsing_magic(response)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> approve:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  client.put_approval_result(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    pipelineName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">pipeline_name,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    stageName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">stage_name,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    actionName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">action_name,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &#39;summary&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Automatically approved by Lambda.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &#39;status&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Approved&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    },</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    token</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">token</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  )</span></span></code></pre></div><h3 id="disable-enable-transaction" tabindex="-1">Disable/enable transaction <a class="header-anchor" href="#disable-enable-transaction" aria-label="Permalink to &quot;Disable/enable transaction&quot;">​</a></h3><p>Disable the transition to a stage named Staging in a pipeline named MyFirstPipeline:</p><blockquote><p>aws codepipeline disable-stage-transition --pipeline-name MyFirstPipeline --stage-name Staging --transition-type Inbound --reason &quot;My Reason&quot;</p></blockquote><p>enable the transition to a stage named Staging in a pipeline named MyFirstPipeline:</p><blockquote><p>aws codepipeline enable-stage-transition --pipeline-name MyFirstPipeline --stage-name Staging --transition-type Inbound</p></blockquote><h3 id="halt-promotions" tabindex="-1">Halt Promotions <a class="header-anchor" href="#halt-promotions" aria-label="Permalink to &quot;Halt Promotions&quot;">​</a></h3><p>CodeDeploy rolls back deployments by redeploying a previously version.</p><ul><li>automatic: configure a deployment group or deployment to automatically roll back when fails or a customized threshold was met</li><li>manual rollback</li></ul>`,68);function E(s,v,q,S,P,_){const h=e("Badge"),r=o,k=e("ClientOnly");return l(),c("div",null,[p("h1",F,[n("AWS CodeDeploy "),t(h,{text:"CodeDeploy",type:"warning"}),n(),B]),t(k,null,{default:y(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),A(r,{key:0,article:s.$frontmatter},null,8,["article"])):u("",!0)]}),_:1}),b])}const I=d(C,[["render",E]]);export{L as __pageData,I as default};
