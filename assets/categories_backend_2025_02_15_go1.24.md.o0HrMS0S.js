import{_ as d}from"./chunks/ArticleMetadata.DdR0KDjp.js";import{_ as g,m as n,a as y,e as h,x as t,u as e,B as o,ah as A,o as l,p as c,q as D}from"./chunks/framework.BuAcqOzq.js";import"./chunks/theme.ClqH_n1A.js";const x=JSON.parse('{"title":"Go 1.24 updates","description":"","frontmatter":{"title":"Go 1.24 updates","author":"ChocolateAceCream","date":"2025/02/15 19:00","isTop":false,"categories":["backend"],"tags":["Go"]},"headers":[],"relativePath":"categories/backend/2025/02/15/go1.24.md","filePath":"categories/backend/2025/02/15/go1.24.md","lastUpdated":1739667372000}'),C={name:"categories/backend/2025/02/15/go1.24.md"},F={id:"what-s-new-in-go-1-24",tabindex:"-1"},u=h("a",{class:"header-anchor",href:"#what-s-new-in-go-1-24","aria-label":`Permalink to "What's new in Go 1.24  <Badge text="Go" type="warning" />"`},"​",-1),B=A(`<p>Recently go1.24 is out, let&#39;s see what&#39;s new in Go 1.24</p><h2 id="generic-type-aliases" tabindex="-1">Generic type aliases <a class="header-anchor" href="#generic-type-aliases" aria-label="Permalink to &quot;Generic type aliases&quot;">​</a></h2><p>A type alias can now be parameterized like a defined type e.g.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Items []</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Alias for better readability in different contexts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> IntList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> StringList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    il </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> IntList</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{Items: []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    sl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> StringList</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{Items: []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;B&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;C&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    PrintList</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(il) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// [1, 2, 3]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    PrintList</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(sl) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="why-using-it" tabindex="-1">Why using it? <a class="header-anchor" href="#why-using-it" aria-label="Permalink to &quot;Why using it?&quot;">​</a></h3><ul><li><p>Improves readability As shown in previous code block, you created IntList and StringList, which is more readable than just using a List[T any]</p></li><li><p>Eases migration: Backward compatibility You can easily transform old non-generic type into a generic type without broking the code e.g.</p></li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// previous non-generic type</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> OldBox</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// introducing a new generic type</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Box</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Value </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Fixed type alias, OldBox can be used directly, no need to use like this OldBox[int]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> OldBox</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Box</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Now your old code using OldBox won&#39;t be broken and for new code we can just use Box instead</span></span></code></pre></div><ul><li>Reduces redundant wrapping: no duplicate types Instead of defining duplicated types with same struct body (as different teams may want to use different names) like this</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ErrorWrapper</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Data    </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Another team creates a duplicate type with a different name</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> APIErrorWrapper</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Data    </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>Now we can just define a universal type and use type alias</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ErrorWrapper</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Data    </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// APIError is still generic, when using, need to pass T like this</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// apiErr := APIError[string]{Message: &quot;Failed&quot;, Data: &quot;Invalid request&quot;} // ✅ Type must be specified</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> APIError</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ErrorWrapper[T]</span></span></code></pre></div>`,11);function E(s,m,b,_,f,w){const p=n("Badge"),k=d,r=n("ClientOnly");return l(),y("div",null,[h("h1",F,[t("What's new in Go 1.24 "),e(p,{text:"Go",type:"warning"}),t(),u]),e(r,null,{default:o(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),c(k,{key:0,article:s.$frontmatter},null,8,["article"])):D("",!0)]}),_:1}),B])}const I=g(C,[["render",E]]);export{x as __pageData,I as default};
