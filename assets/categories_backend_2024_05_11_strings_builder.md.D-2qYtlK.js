import{_ as d}from"./chunks/ArticleMetadata.D9S3QExD.js";import{_ as k,m as e,a as c,e as l,x as a,u as n,B as g,ah as u,o as r,p as m,q as y}from"./chunks/framework.BuAcqOzq.js";import"./chunks/theme.CeVMI8wa.js";const x=JSON.parse('{"title":"strings.Builder","description":"","frontmatter":{"title":"strings.Builder","author":"ChocolateAceCream","date":"2024/05/11 19:00","isTop":false,"categories":["backend"],"tags":["Go"]},"headers":[],"relativePath":"categories/backend/2024/05/11/strings_builder.md","filePath":"categories/backend/2024/05/11/strings_builder.md","lastUpdated":1715492515000}'),_={name:"categories/backend/2024/05/11/strings_builder.md"},A={id:"strings-builder",tabindex:"-1"},b=l("a",{class:"header-anchor",href:"#strings-builder","aria-label":'Permalink to "strings.Builder <Badge text="Go" type="warning" />"'},"​",-1),B=u(`<p>strings.Builder type is a part of the &#39;strings&#39; package that is used to build strings from multiple pieces on a strings.Builder object. Use case: construct a large string from many small pieces, as it significantly reduces memory allocation and copying overhead compared to naive string concatenation</p><h3 id="methods-of-strings-builder" tabindex="-1">Methods of strings.Builder <a class="header-anchor" href="#methods-of-strings-builder" aria-label="Permalink to &quot;Methods of strings.Builder&quot;">​</a></h3><p>Here are some of the key methods provided by strings.Builder:</p><ul><li>Write([]byte) (int, error): Appends the contents of a byte slice to the builder.</li><li>WriteString(string) (int, error): Appends a string to the builder.</li><li>WriteByte(byte) error: Appends a byte to the builder.</li><li>String() string: Returns the accumulated string.</li><li>Len() int: Returns the length of the accumulated string in the builder.</li><li>Reset(): Resets the builder, clearing all content in the buffer.</li></ul><p>e.g.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> StringConcatenation</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 100000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;data &quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div>`,6);function f(s,C,D,F,E,v){const h=e("Badge"),o=d,p=e("ClientOnly");return r(),c("div",null,[l("h1",A,[a("strings.Builder "),n(h,{text:"Go",type:"warning"}),a(),b]),n(p,null,{default:g(()=>{var i,t;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((t=s.$frontmatter)==null?void 0:t.showArticleMetadata)??!0)?(r(),m(o,{key:0,article:s.$frontmatter},null,8,["article"])):y("",!0)]}),_:1}),B])}const N=k(_,[["render",f]]);export{x as __pageData,N as default};
