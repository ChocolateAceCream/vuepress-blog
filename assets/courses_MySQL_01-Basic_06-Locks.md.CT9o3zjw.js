import{_ as h}from"./chunks/ArticleMetadata.mipB6ojH.js";import{_ as k,m as o,a as p,e as d,x as l,u as r,B as u,ah as m,o as i,p as y,q as b}from"./chunks/framework.BuAcqOzq.js";import"./chunks/theme.DIWLA10i.js";const v=JSON.parse('{"title":"Locks","description":"","frontmatter":{"title":"Locks","author":"ChocolateAceCream","date":"2024/02/23 10:24","isTop":true,"categories":["MySQL"],"tags":["MySQL"]},"headers":[],"relativePath":"courses/MySQL/01-Basic/06-Locks.md","filePath":"courses/MySQL/01-Basic/06-Locks.md","lastUpdated":1717113273000}'),_={name:"courses/MySQL/01-Basic/06-Locks.md"},S={id:"locks",tabindex:"-1"},w=d("a",{class:"header-anchor",href:"#locks","aria-label":'Permalink to "Locks <Badge text="MySQL" type="warning" />"'},"​",-1),f=m('<p>We can add locks to read/write operations to solve dirty write/dirty read/repeatable read/phantom problem. Which is less efficiency than MVCC.</p><h5 id="consistent-reads" tabindex="-1">Consistent reads <a class="header-anchor" href="#consistent-reads" aria-label="Permalink to &quot;Consistent reads&quot;">​</a></h5><p>transactions that applied MVCC under READ COMMITTED, REPEATABLE READ, any SELECT statement is not locked, so called consistent reads.</p><h3 id="locking-reads" tabindex="-1">Locking Reads <a class="header-anchor" href="#locking-reads" aria-label="Permalink to &quot;Locking Reads&quot;">​</a></h3><ul><li>Shared Locks(S Lock): To read a record, has to first obtain its S lock.</li><li>Exclusive Locks(X Lock): To write a record, has to first obtain its x lock.</li><li>S lock will block x lock</li><li>S lock will not block S lock</li><li>X lock will block S lock and X lock</li></ul><h5 id="synyax" tabindex="-1">Synyax <a class="header-anchor" href="#synyax" aria-label="Permalink to &quot;Synyax&quot;">​</a></h5><p>s lock:</p><blockquote><p>SELECT ... LOCK IN SHARE MODE</p></blockquote><p>X lock:</p><blockquote><p>SELECT ... FOR UPDATE;</p></blockquote><h3 id="write" tabindex="-1">write <a class="header-anchor" href="#write" aria-label="Permalink to &quot;write&quot;">​</a></h3><ul><li>delete: can be treated as a locking read with x lock</li><li>update: three cases</li></ul><ol><li>if updated data storage space not changed, and primary key not changed, then treated as a locking read with X lock</li><li>if updated data storage space change, but primary key not changed, treated as a delete with x lock and then insert with explicitly lock.</li><li>if primary key changed, indeed it&#39;s a delete and insert.</li></ol><ul><li>insert: usually adding a new record don&#39;t need lock. so mysql introduce an explicitly lock to make sure the inserted data is not visible to other transactions before commit.</li></ul><h2 id="multi-granularity-lock" tabindex="-1">Multi-granularity lock <a class="header-anchor" href="#multi-granularity-lock" aria-label="Permalink to &quot;Multi-granularity lock&quot;">​</a></h2><p>previously locks we talked about are all row level locks. We can add locks on table level as well(s lock or x lock) Once table is s or x locked, its rows are also s or x locked. However, when lock the table, we have to check if any rows have already locked. To avoid iterating the whole table, when we lock the row, we add <em><strong>intension lock</strong></em> (IS- intension s lock or IX - intension x lock)on the table first.</p><table><thead><tr><th>compatibility</th><th>X</th><th>IX</th><th>S</th><th>IS</th></tr></thead><tbody><tr><td>X</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td>IX</td><td>❌</td><td>✔️</td><td>❌</td><td>✔️</td></tr><tr><td>S</td><td>❌</td><td>❌</td><td>✔️</td><td>✔️</td></tr><tr><td>IS</td><td>❌</td><td>✔️</td><td>✔️</td><td>✔️</td></tr></tbody></table><p>since IX and IS are only used in quick check if table can be applied S lock or X lock, IX and IS are compatible to each other.</p>',18);function g(t,x,L,C,E,T){const s=o("Badge"),c=h,n=o("ClientOnly");return i(),p("div",null,[d("h1",S,[l("Locks "),r(s,{text:"MySQL",type:"warning"}),l(),w]),r(n,null,{default:u(()=>{var e,a;return[(((e=t.$frontmatter)==null?void 0:e.aside)??!0)&&(((a=t.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(i(),y(c,{key:0,article:t.$frontmatter},null,8,["article"])):b("",!0)]}),_:1}),f])}const X=k(_,[["render",g]]);export{v as __pageData,X as default};
