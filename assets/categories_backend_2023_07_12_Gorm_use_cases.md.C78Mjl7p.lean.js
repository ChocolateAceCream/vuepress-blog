import{_ as o}from"./chunks/ArticleMetadata.bggzNr0R.js";import{_ as g,m as n,a as y,e as h,x as i,u as e,B as A,ah as p,o as l,p as D,q as c}from"./chunks/framework.BuAcqOzq.js";import"./chunks/theme.2TsrVBZd.js";const R=JSON.parse('{"title":"Gorm Use Cases","description":"","frontmatter":{"title":"Gorm Use Cases","author":"ChocolateAceCream","date":"2023/07/12 19:00","isTop":false,"categories":["backend"],"tags":["Go","Gorm","Pagination","MySQL","Cascade Delete"]},"headers":[],"relativePath":"categories/backend/2023/07/12/Gorm_use_cases.md","filePath":"categories/backend/2023/07/12/Gorm_use_cases.md","lastUpdated":1714716219000}'),u={name:"categories/backend/2023/07/12/Gorm_use_cases.md"},F={id:"gorm-use-cases-sample-codes",tabindex:"-1"},C=h("a",{class:"header-anchor",href:"#gorm-use-cases-sample-codes","aria-label":'Permalink to "Gorm Use Cases Sample Codes <Badge text="Gorm" type="warning" />"'},"​",-1),m=p("",13),B=p("",25);function E(s,q,b,_,f,w){const k=n("Badge"),r=o,d=n("ClientOnly");return l(),y("div",null,[h("h1",F,[i("Gorm Use Cases Sample Codes "),e(k,{text:"Gorm",type:"warning"}),i(),C]),e(d,null,{default:A(()=>{var a,t;return[(((a=s.$frontmatter)==null?void 0:a.aside)??!0)&&(((t=s.$frontmatter)==null?void 0:t.showArticleMetadata)??!0)?(l(),D(r,{key:0,article:s.$frontmatter},null,8,["article"])):c("",!0)]}),_:1}),m,i(" ##### SQL_CALC_FOUND_ROWS & FOUND_ROWS() If we want to paginate search result, the LIMIT keyword will restrict the number of result returned. However, we usually also want to return the total number of matching records, thus we use SQL_CALC_FOUND_ROWS & FOUND_ROWS() to avoid executing search query one more time. e.g. mysql ```sql SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name WHERE id > 100 LIMIT 10; SELECT FOUND_ROWS（） ``` after the first select statement, we can easily retrieve the total number of matching records by calling FOUND_ROWS（） function, which counted result without implementing LIMIT. "),B])}const I=g(u,[["render",E]]);export{R as __pageData,I as default};
