import{_ as h}from"./chunks/ArticleMetadata.UzUth8bb.js";import{_ as p,m as o,a as u,e as r,x as n,u as i,B as m,ah as _,o as s,p as S,q as v}from"./chunks/framework.BuAcqOzq.js";import"./chunks/theme.BJcPGfVs.js";const B=JSON.parse('{"title":"Server Side Event","description":"","frontmatter":{"title":"Server Side Event","author":"ChocolateAceCream","date":"2024/09/30 19:00","isTop":false,"categories":["backend"],"tags":["Server Side Event"]},"headers":[],"relativePath":"categories/backend/2024/09/30/server_side_event.md","filePath":"categories/backend/2024/09/30/server_side_event.md","lastUpdated":1728152262000}'),g={name:"categories/backend/2024/09/30/server_side_event.md"},w={id:"server-side-event-sse",tabindex:"-1"},b=r("a",{class:"header-anchor",href:"#server-side-event-sse","aria-label":'Permalink to "Server Side Event (SSE) <Badge text="SSE" type="warning" />"'},"​",-1),f=_('<h2 id="what-is-sse" tabindex="-1">What is SSE <a class="header-anchor" href="#what-is-sse" aria-label="Permalink to &quot;What is SSE&quot;">​</a></h2><p>a long-live http GET request, backend can write to response body in real-time and frontend can subscribe to the message to get the update. It&#39;s one-way communication unlike websocket</p><h2 id="why-using-sse" tabindex="-1">why using SSE <a class="header-anchor" href="#why-using-sse" aria-label="Permalink to &quot;why using SSE&quot;">​</a></h2><p>low-cost, light-weight, easy to implement (no ping/heart-beep), built-in reconnection.</p><h2 id="limitations" tabindex="-1">limitations <a class="header-anchor" href="#limitations" aria-label="Permalink to &quot;limitations&quot;">​</a></h2><p>since SSE is indeed http request which is long-live, so server will have to hold the request for a long-time, which take up the big portion of server http handling capacity.</p><p>Also, for older browser, it may not support SSE.</p><h2 id="how-to-use" tabindex="-1">how to use <a class="header-anchor" href="#how-to-use" aria-label="Permalink to &quot;how to use&quot;">​</a></h2><p>A few things to notice when setting up SSE in backend:</p><ol><li>don&#39;t return the request. Once returned, the request ends, and SSE is no longer valid</li><li>don&#39;t set writeTimeout (response timeout) on server, since SSE need to be long-live. Also, if a writeTimeout is set, clint side may keep trying reconnect once timeout reached</li></ol>',10);function E(e,k,y,q,T,x){const l=o("Badge"),d=h,c=o("ClientOnly");return s(),u("div",null,[r("h1",w,[n("Server Side Event (SSE) "),i(l,{text:"SSE",type:"warning"}),n(),b]),i(c,null,{default:m(()=>{var t,a;return[(((t=e.$frontmatter)==null?void 0:t.aside)??!0)&&(((a=e.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(s(),S(d,{key:0,article:e.$frontmatter},null,8,["article"])):v("",!0)]}),_:1}),f])}const N=p(g,[["render",E]]);export{B as __pageData,N as default};
