import{_ as h}from"./chunks/ArticleMetadata.CG4LbEYC.js";import{_ as p,m as i,a as g,e as r,x as n,u as s,B as m,ah as u,o,p as _,q as b}from"./chunks/framework.BuAcqOzq.js";import"./chunks/theme.Bet4ldDB.js";const V=JSON.parse('{"title":"BigInt","description":"","frontmatter":{"title":"BigInt","author":"ChocolateAceCream","date":"2023/09/25 19:00","isTop":false,"categories":["frontend"],"tags":["JavaScript"]},"headers":[],"relativePath":"categories/frontend/2023/09/25/bigInt.md","filePath":"categories/frontend/2023/09/25/bigInt.md","lastUpdated":1714619516000}'),k={name:"categories/frontend/2023/09/25/bigInt.md"},y={id:"bigint",tabindex:"-1"},f=r("a",{class:"header-anchor",href:"#bigint","aria-label":'Permalink to "BigInt <Badge text="JavaScript" type="warning" />"'},"​",-1),B=u(`<h3 id="why-bigint" tabindex="-1">Why BigInt ? <a class="header-anchor" href="#why-bigint" aria-label="Permalink to &quot;Why BigInt ?&quot;">​</a></h3><ol><li><p>JS cannot handle big number calculation correctly. Any number that exceeds the range from -2^53 to 2^52 will not be guaranteed to be accurately calculated.</p></li><li><p>JS Number has limitations: each Number is converted to binary first then stored in memory and used for operations. As a result, these decimal numbers lose precision when they are converted to binary and vice versa.</p></li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 0.30000000000000004</span></span></code></pre></div><p>Using BigInt can completely avoid this problem because decimal numbers are not allowed in BigInt.</p><ol start="3"><li>Similar to the first point, Number has an upper bound at Number.MAX_VALUE and a lower bound at Number.MIN_VALUE, so if you need to do calculations that exceed that range, they will not be accurate.</li></ol>`,5);function C(e,A,v,I,N,w){const l=i("Badge"),c=h,d=i("ClientOnly");return o(),g("div",null,[r("h1",y,[n("BigInt "),s(l,{text:"JavaScript",type:"warning"}),n(),f]),s(d,null,{default:m(()=>{var t,a;return[(((t=e.$frontmatter)==null?void 0:t.aside)??!0)&&(((a=e.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(o(),_(c,{key:0,article:e.$frontmatter},null,8,["article"])):b("",!0)]}),_:1}),B])}const T=p(k,[["render",C]]);export{V as __pageData,T as default};
