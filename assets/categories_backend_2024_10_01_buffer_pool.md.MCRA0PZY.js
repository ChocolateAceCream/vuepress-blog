import{_ as o}from"./chunks/ArticleMetadata.d-SEULBi.js";import{_ as d,m as e,a as f,e as h,x as t,u as n,B as u,ah as g,o as l,p as c,q as y}from"./chunks/framework.BuAcqOzq.js";import"./chunks/theme.BOfCjdGv.js";const q=JSON.parse('{"title":"Buffer Pool","description":"","frontmatter":{"title":"Buffer Pool","author":"ChocolateAceCream","date":"2024/10/01 19:00","isTop":false,"categories":["backend"],"tags":["Go"]},"headers":[],"relativePath":"categories/backend/2024/10/01/buffer_pool.md","filePath":"categories/backend/2024/10/01/buffer_pool.md","lastUpdated":1728152262000}'),A={name:"categories/backend/2024/10/01/buffer_pool.md"},D={id:"buffer-pool",tabindex:"-1"},C=h("a",{class:"header-anchor",href:"#buffer-pool","aria-label":'Permalink to "Buffer Pool <Badge text="Go" type="warning" />"'},"​",-1),B=g(`<h2 id="why-buffer-pool" tabindex="-1">Why buffer pool <a class="header-anchor" href="#why-buffer-pool" aria-label="Permalink to &quot;Why buffer pool&quot;">​</a></h2><p>When buffers are frequently used and discarded (like http response writer), using buffer pool can avoid excessive memory allocations.</p><h2 id="what-is-buffer-pool" tabindex="-1">What is buffer pool <a class="header-anchor" href="#what-is-buffer-pool" aria-label="Permalink to &quot;What is buffer pool&quot;">​</a></h2><p>A pool to store buffers, usually have a get() and put(), where get() will return a buffer from pool if existing unused buffers, or create new buffer if no existing buffers in pool. and put() will reset buffer and then return the buffer to the pool for recycling.</p><p>P.S buffers in buffer pool can be GC, once no goroutine request that buffer for a certain time, then GC will recycle the buffer from pool. So buffer pool in go like sync.Pool is designed for short-lived, frequently reused objects.</p><h2 id="how-to-use" tabindex="-1">How to use <a class="header-anchor" href="#how-to-use" aria-label="Permalink to &quot;How to use&quot;">​</a></h2><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> BufferPool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  pool </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sync</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Pool</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">BufferPool</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">bytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  buf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> p.pool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> buf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">bytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> buf.(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">bytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">BufferPool</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Put</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">buf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">bytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  p.pool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Put</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(buf)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div>`,7);function b(s,F,_,m,E,P){const p=e("Badge"),k=o,r=e("ClientOnly");return l(),f("div",null,[h("h1",D,[t("Buffer Pool "),n(p,{text:"Go",type:"warning"}),t(),C]),n(r,null,{default:u(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),c(k,{key:0,article:s.$frontmatter},null,8,["article"])):y("",!0)]}),_:1}),B])}const T=d(A,[["render",b]]);export{q as __pageData,T as default};
