import{_ as h}from"./chunks/ArticleMetadata.D9S3QExD.js";import{_ as u,m as i,a as m,e as r,x as s,u as n,B as p,ah as g,o,p as f,q as b}from"./chunks/framework.BuAcqOzq.js";import"./chunks/theme.CeVMI8wa.js";const _="/vuepress-blog/assets/regression_testing.BSepZJWu.png",M=JSON.parse('{"title":"Testing","description":"","frontmatter":{"title":"Testing","author":"ChocolateAceCream","date":"2024/05/06 10:25","categories":["AWS"],"tags":["AWS","CI/CD","Testing"]},"headers":[],"relativePath":"courses/AWS/02-CI_CD_Tools/02-testing.md","filePath":"courses/AWS/02-CI_CD_Tools/02-testing.md","lastUpdated":1715107407000}'),k={name:"courses/AWS/02-CI_CD_Tools/02-testing.md"},q={id:"aws-testing-with-codepipeline",tabindex:"-1"},w=r("a",{class:"header-anchor",href:"#aws-testing-with-codepipeline","aria-label":'Permalink to "AWS Testing with CodePipeline<Badge text="Testing" type="warning" />"'},"​",-1),v=g('<h2 id="codepipeline" tabindex="-1">CodePipeline <a class="header-anchor" href="#codepipeline" aria-label="Permalink to &quot;CodePipeline&quot;">​</a></h2><p>powerful automation framework for the CD process.</p><h3 id="device-farm" tabindex="-1">Device Farm <a class="header-anchor" href="#device-farm" aria-label="Permalink to &quot;Device Farm&quot;">​</a></h3><p>a service that enables to test mobile OS apps on real devices (not emulators or simulators), allow video, screenshots, logs and performance data viewing.</p><h2 id="regression-testing" tabindex="-1">Regression testing <a class="header-anchor" href="#regression-testing" aria-label="Permalink to &quot;Regression testing&quot;">​</a></h2><p>Regression testing accounts for almost 1/2 of software maintenance costs and up to 80% of the testing budget</p><h3 id="device-farm-1" tabindex="-1">Device Farm <a class="header-anchor" href="#device-farm-1" aria-label="Permalink to &quot;Device Farm&quot;">​</a></h3><p>a service that enables to test mobile OS apps on real devices (not emulators or simulators), allow video, screenshots, logs and performance data viewing.</p><p>The pipeline should be configured as following: <img src="'+_+'" alt="regression_testing.png"></p><h2 id="performance-testing" tabindex="-1">Performance testing <a class="header-anchor" href="#performance-testing" aria-label="Permalink to &quot;Performance testing&quot;">​</a></h2><p>Performance testing determines how your system performs in terms of responsiveness and stability under a specific workload</p><h3 id="load-testing" tabindex="-1">Load testing <a class="header-anchor" href="#load-testing" aria-label="Permalink to &quot;Load testing&quot;">​</a></h3><ul><li>determines performance of a system under load</li><li>simulates multiple users concurrently accessing the system with test scripts</li><li>Measures an application&#39;s quality of service.</li></ul><h5 id="blazemeter" tabindex="-1">BlazeMeter <a class="header-anchor" href="#blazemeter" aria-label="Permalink to &quot;BlazeMeter&quot;">​</a></h5><p>extends Apache JMeter by providing some additional capabilities such as automatic scaling and professional reporting</p><h3 id="stress-testing" tabindex="-1">Stress testing <a class="header-anchor" href="#stress-testing" aria-label="Permalink to &quot;Stress testing&quot;">​</a></h3><ul><li>Understands limits of the system</li><li>Discovers at what point the software fails</li><li>help determine how long it takes to recover from failure</li></ul><h3 id="soak-testing" tabindex="-1">Soak testing <a class="header-anchor" href="#soak-testing" aria-label="Permalink to &quot;Soak testing&quot;">​</a></h3><ul><li>runs normal workloads but for extended periods of time</li><li>checks for potential issues such as memory leaks</li><li>helps determine how long an unexpected load can be maintained</li></ul><h3 id="spike-testing" tabindex="-1">Spike testing <a class="header-anchor" href="#spike-testing" aria-label="Permalink to &quot;Spike testing&quot;">​</a></h3><ul><li>increases workloads quickly and repeatedly</li><li>Helps determine if dramatic increase or decreases in load affect performance</li></ul><h3 id="breakpoint-testing" tabindex="-1">Breakpoint testing <a class="header-anchor" href="#breakpoint-testing" aria-label="Permalink to &quot;Breakpoint testing&quot;">​</a></h3><ul><li>Measures the maximum capacity the system can run and still meet its service-level agreements</li><li>Helps determine what metrics should be used to determine a scale-out event</li></ul><h3 id="configuration-testing" tabindex="-1">Configuration testing <a class="header-anchor" href="#configuration-testing" aria-label="Permalink to &quot;Configuration testing&quot;">​</a></h3><ul><li>tests the effects of configuration changes</li><li>helps determine optimal combinations of hardware and software</li></ul><h3 id="isolation-testing" tabindex="-1">Isolation testing <a class="header-anchor" href="#isolation-testing" aria-label="Permalink to &quot;Isolation testing&quot;">​</a></h3><ul><li>Repeats a test that resulted in a system problem to determine fault</li><li>Helps isolate and confirm the fault domain</li></ul><h3 id="user-acceptance-testing-uat" tabindex="-1">User acceptance testing(UAT) <a class="header-anchor" href="#user-acceptance-testing-uat" aria-label="Permalink to &quot;User acceptance testing(UAT)&quot;">​</a></h3><ul><li>where actual users test the software to ensure it can handle the required tasks.</li><li>A/B testing: Alpha testing is done in the dev env, while beta testing is done as a field test on client side</li><li>Black-box testing: check input and output without knowledge of the system internals</li></ul><h3 id="metrics-to-be-collected" tabindex="-1">Metrics to be collected <a class="header-anchor" href="#metrics-to-be-collected" aria-label="Permalink to &quot;Metrics to be collected&quot;">​</a></h3><ul><li>Average response time</li><li>Peak response time</li><li>Error rates</li><li>Concurrent users</li><li>RPS (request per second)</li><li>throughput</li></ul>',31);function P(e,x,C,S,y,T){const l=i("Badge"),c=h,d=i("ClientOnly");return o(),m("div",null,[r("h1",q,[s("AWS Testing with CodePipeline"),n(l,{text:"Testing",type:"warning"}),s(),w]),n(d,null,{default:p(()=>{var t,a;return[(((t=e.$frontmatter)==null?void 0:t.aside)??!0)&&(((a=e.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(o(),f(c,{key:0,article:e.$frontmatter},null,8,["article"])):b("",!0)]}),_:1}),v])}const I=u(k,[["render",P]]);export{M as __pageData,I as default};
