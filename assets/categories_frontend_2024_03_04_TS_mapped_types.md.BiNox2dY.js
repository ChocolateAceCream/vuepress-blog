import{_ as d}from"./chunks/ArticleMetadata.8RRth8fw.js";import{_ as o,m as t,a as y,e as h,x as e,u as n,B as g,ah as c,o as p,p as A,q as C}from"./chunks/framework.BuAcqOzq.js";import"./chunks/theme.Dh-RA0zo.js";const v=JSON.parse('{"title":"TS Mapped Types","description":"","frontmatter":{"title":"TS Mapped Types","author":"ChocolateAceCream","date":"2024/03/04 19:00","isTop":false,"categories":["frontend"],"tags":["TypeScript"]},"headers":[],"relativePath":"categories/frontend/2024/03/04/TS_mapped_types.md","filePath":"categories/frontend/2024/03/04/TS_mapped_types.md","lastUpdated":1714619516000}'),D={name:"categories/frontend/2024/03/04/TS_mapped_types.md"},F={id:"ts-mapped-types",tabindex:"-1"},_=h("a",{class:"header-anchor",href:"#ts-mapped-types","aria-label":'Permalink to "TS Mapped Types <Badge text="TypeScript" type="warning" />"'},"â€‹",-1),m=c(`<p>Mapped Types are a way to create new types based on another type, usually as a transformational type.</p><p>Common use case is for partial subsets of existing type</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Artist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//if we want to create an UpdateArtist type to send update request with artist as payload, we can use Partial</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> UpdateArtistPayload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Partial</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Artist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// or Mapped types</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> UpdateArtistPayload2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Artist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">k</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div>`,3);function u(s,B,T,f,E,S){const l=t("Badge"),k=d,r=t("ClientOnly");return p(),y("div",null,[h("h1",F,[e("TS Mapped Types "),n(l,{text:"TypeScript",type:"warning"}),e(),_]),n(r,null,{default:g(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(p(),A(k,{key:0,article:s.$frontmatter},null,8,["article"])):C("",!0)]}),_:1}),m])}const M=o(D,[["render",u]]);export{v as __pageData,M as default};
