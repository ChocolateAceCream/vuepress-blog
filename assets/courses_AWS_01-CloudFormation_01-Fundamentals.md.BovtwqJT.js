import{_ as d}from"./chunks/ArticleMetadata.CtILaBjn.js";import{_ as m,m as o,a as h,e as s,x as r,u as n,B as p,ah as f,o as l,p as _,q as g}from"./chunks/framework.BuAcqOzq.js";import"./chunks/theme.CfTXx1TZ.js";const w=JSON.parse('{"title":"AWS CloudFormation Fundamentals","description":"","frontmatter":{"title":"AWS CloudFormation Fundamentals","author":"ChocolateAceCream","date":"2024/05/05 10:24","categories":["AWS"],"tags":["AWS","CloudFormation"]},"headers":[],"relativePath":"courses/AWS/01-CloudFormation/01-Fundamentals.md","filePath":"courses/AWS/01-CloudFormation/01-Fundamentals.md","lastUpdated":1715107407000}'),b={name:"courses/AWS/01-CloudFormation/01-Fundamentals.md"},S={id:"aws-cloudformation-fundamentals",tabindex:"-1"},y=s("a",{class:"header-anchor",href:"#aws-cloudformation-fundamentals","aria-label":'Permalink to "AWS CloudFormation Fundamentals <Badge text="CloudFormation" type="warning" />"'},"​",-1),C=f('<p>AWS CloudFormation helps modeling and provisioning aws resources. Also, can be used to define your infrastructure as code (IaC)</p><h4 id="benefits" tabindex="-1">Benefits <a class="header-anchor" href="#benefits" aria-label="Permalink to &quot;Benefits&quot;">​</a></h4><ul><li>versionv control of infrastructure</li><li>spent less time on infra</li><li>experiment quickly</li></ul><h4 id="common-usage" tabindex="-1">Common usage <a class="header-anchor" href="#common-usage" aria-label="Permalink to &quot;Common usage&quot;">​</a></h4><ul><li>implement a disaster recovery plan</li><li>quickly replicate infra for more availability</li><li>control and track changes of infra</li><li>easy to create experimenting infra</li></ul><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources&quot;">​</a></h2><p>any of objects you created, e.g. S3 buckets, DynamoDB, EC2 etc</p><h2 id="templates" tabindex="-1">Templates <a class="header-anchor" href="#templates" aria-label="Permalink to &quot;Templates&quot;">​</a></h2><p>JSON or YAML files that define the characteristics of stack params, mappings, resource props and output vals.</p><h2 id="stack" tabindex="-1">Stack <a class="header-anchor" href="#stack" aria-label="Permalink to &quot;Stack&quot;">​</a></h2><p>Groups of related AWS resources created by template.</p><h2 id="macros" tabindex="-1">Macros <a class="header-anchor" href="#macros" aria-label="Permalink to &quot;Macros&quot;">​</a></h2><p>AWS CloudFormation Macros can arbitrarily transform your template. It will take a JSON representation of your template(even though you can define your template as YAML, but it will convert to JSON as input) and output a JSON to replace the original one.</p><h4 id="usage" tabindex="-1">usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;usage&quot;">​</a></h4><ul><li>create DSL</li><li>verify EC2 hard drives are encrypted</li><li>verify all resources are tagged with a cost center</li><li>add CloudWatch alarms for specific resources, depending on the resource type</li><li>add dead-letter queues to Simple Queue Service queues/</li></ul><h3 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h3><p>create a macros to call a lambda function which do the logic part of transforming JSON template. Also remember to assign proper IAM to let macro call the lambda function.</p>',17);function k(e,A,q,F,x,v){const i=o("Badge"),c=d,u=o("ClientOnly");return l(),h("div",null,[s("h1",S,[r("AWS CloudFormation Fundamentals "),n(i,{text:"CloudFormation",type:"warning"}),r(),y]),n(u,null,{default:p(()=>{var a,t;return[(((a=e.$frontmatter)==null?void 0:a.aside)??!0)&&(((t=e.$frontmatter)==null?void 0:t.showArticleMetadata)??!0)?(l(),_(c,{key:0,article:e.$frontmatter},null,8,["article"])):g("",!0)]}),_:1}),C])}const B=m(b,[["render",k]]);export{w as __pageData,B as default};
