import{_ as m}from"./chunks/ArticleMetadata.BX5YQDgB.js";import{_ as g,m as k,a as u,e as t,x as l,u as e,B as o,ah as A,o as n,p,q as d}from"./chunks/framework.C8Xrbvax.js";import"./chunks/theme.CbFC1_Md.js";const S=JSON.parse('{"title":"Common operator & commands","description":"","frontmatter":{"title":"Common operator & commands","author":"ChocolateAceCream","date":"2024/07/24 22:24","isTop":true,"categories":["PostgreSQL"],"tags":["PostgreSQL"]},"headers":[],"relativePath":"courses/PostgreSQL/01-Basic/01-basic_commands.md","filePath":"courses/PostgreSQL/01-Basic/01-basic_commands.md","lastUpdated":1722457583000}'),C={name:"courses/PostgreSQL/01-Basic/01-basic_commands.md"},y={id:"common-operator-commands",tabindex:"-1"},f=t("a",{class:"header-anchor",href:"#common-operator-commands","aria-label":'Permalink to "Common operator & commands <Badge text="PostgreSQL" type="warning" />"'},"​",-1),F=t("h1",{id:"function-and-trigger",tabindex:"-1"},[l("Function and trigger "),t("a",{class:"header-anchor",href:"#function-and-trigger","aria-label":'Permalink to "Function and trigger"'},"​")],-1),D=t("h1",{id:"advanced-operators-functions",tabindex:"-1"},[l("Advanced operators & functions "),t("a",{class:"header-anchor",href:"#advanced-operators-functions","aria-label":'Permalink to "Advanced operators & functions"'},"​")],-1),_=A(`<h2 id="to-char" tabindex="-1">TO_CHAR <a class="header-anchor" href="#to-char" aria-label="Permalink to &quot;TO_CHAR&quot;">​</a></h2><p>used to format a number or date/time value to a string given the desired format. e.g.</p><blockquote><p>TO_CHAR(value,format)</p></blockquote><ul><li>value: date/time or numeric value</li><li>format: format template</li></ul><h3 id="fill-mode-fm" tabindex="-1">Fill Mode (FM) <a class="header-anchor" href="#fill-mode-fm" aria-label="Permalink to &quot;Fill Mode (FM)&quot;">​</a></h3><p>in TO_CHAR(), FM modifier is used to create more readable outputs by trimming spaces and leading zeros. e.g.</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TO_CHAR(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4500</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;9990.999&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- Output: &#39; 123.450&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TO_CHAR(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4500</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;FM9990.999&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- Output: &#39;123.45&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TO_CHAR(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">12345</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">67</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;FM999G999D99&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- Output: &#39;12,345.67&#39;</span></span></code></pre></div><p>P.S. be careful for overflows, once the given input value exceeds the format length, result could be ####.##. P.S.2 FM will automatically round the input and then trim the tailing/leading 0s</p><h3 id="time-formatting" tabindex="-1">Time formatting <a class="header-anchor" href="#time-formatting" aria-label="Permalink to &quot;Time formatting&quot;">​</a></h3><p>e.g.</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TO_CHAR(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NOW</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(), </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;YYYY-MM-DD&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- Output: &#39;2024-07-28&#39;</span></span></code></pre></div><h4 id="where-fm-works-in-formatting-date-time" tabindex="-1">Where FM works in formatting date/time <a class="header-anchor" href="#where-fm-works-in-formatting-date-time" aria-label="Permalink to &quot;Where FM works in formatting date/time&quot;">​</a></h4><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TO_CHAR(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DATE</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;2024-01-28&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Month DD, YYYY&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- Output: &#39;January   28, 2024&#39;</span></span></code></pre></div><p>since TO_CHAR() by default format &#39;Month&#39; with a Fixed-width formatting approach, which ensures that all month names take up the same amount of space (which is the length of longest month name plus one space. len(september) + 1 = 10, which can be helpful for tabular displays). That&#39;s where FM can be used if we don&#39;t want the default format</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TO_CHAR(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DATE</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;2024-07-28&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;FMMonth DD, YYYY&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- Output: &#39;July 28, 2024&#39;</span></span></code></pre></div>`,15);function b(a,B,E,v,T,w){const c=k("Badge"),h=m,r=k("ClientOnly");return n(),u("div",null,[t("h1",y,[l("Common operator & commands "),e(c,{text:"PostgreSQL",type:"warning"}),l(),f]),e(r,null,{default:o(()=>{var s,i;return[(((s=a.$frontmatter)==null?void 0:s.aside)??!0)&&(((i=a.$frontmatter)==null?void 0:i.showArticleMetadata)??!0)?(n(),p(h,{key:0,article:a.$frontmatter},null,8,["article"])):d("",!0)]}),_:1}),F,e(r,null,{default:o(()=>{var s,i;return[(((s=a.$frontmatter)==null?void 0:s.aside)??!0)&&(((i=a.$frontmatter)==null?void 0:i.showArticleMetadata)??!0)?(n(),p(h,{key:0,article:a.$frontmatter},null,8,["article"])):d("",!0)]}),_:1}),D,e(r,null,{default:o(()=>{var s,i;return[(((s=a.$frontmatter)==null?void 0:s.aside)??!0)&&(((i=a.$frontmatter)==null?void 0:i.showArticleMetadata)??!0)?(n(),p(h,{key:0,article:a.$frontmatter},null,8,["article"])):d("",!0)]}),_:1}),_])}const q=g(C,[["render",b]]);export{S as __pageData,q as default};
