import{_ as o}from"./chunks/ArticleMetadata.B_VqCV8o.js";import{_ as d,m as t,a as g,e as l,x as n,u as e,B as c,ah as y,o as h,p as A,q as D}from"./chunks/framework.BuAcqOzq.js";import"./chunks/theme.Cg-vXPBQ.js";const C="/vuepress-blog/assets/gokit.79QricSe.png",x=JSON.parse('{"title":"GoKit Intro","description":"","frontmatter":{"title":"GoKit Intro","author":"ChocolateAceCream","date":"2024/03/05 19:00","isTop":true,"categories":["DevOps"],"tags":["GoKit","Go"]},"headers":[],"relativePath":"categories/DevOps/2024/03/05/GoKit_Intro.md","filePath":"categories/DevOps/2024/03/05/GoKit_Intro.md","lastUpdated":1714766746000}'),u={name:"categories/DevOps/2024/03/05/GoKit_Intro.md"},B={id:"gokit-intro",tabindex:"-1"},F=l("a",{class:"header-anchor",href:"#gokit-intro","aria-label":'Permalink to "GoKit Intro <Badge text="GoKit" type="warning" />"'},"​",-1),m=y('<h3 id="layout" tabindex="-1">Layout <a class="header-anchor" href="#layout" aria-label="Permalink to &quot;Layout&quot;">​</a></h3><p><img src="'+C+`" alt="layout"> explain: when req comes in, it first go through transport layer, which can take rpc, http or gRPC calls, decode request and pass the request through multiple middlewares, such as metrics, load balance/rate limiter, logger tools, etc... and finally routed to a endpoint which call the service which contains business logics.</p><p>a typical main.go in go kit is large, and may like this:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">logger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">NewLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> service </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">todo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Service</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // interface</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">service </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> todo.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">NewService</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// concrete struct</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">service </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> todo.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">NewLoggingMiddleware</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(logger)(service)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">endpoints </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> todo.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">NewEndpoints</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(service)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">transport </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> todo.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">NewHTTPTransport</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(endpoints)</span></span></code></pre></div><p>where endpoints act as an action/handler to route the req to service which contains business logics.</p><p>p.s. if you implement two transports(http and gRPC), you might have two methods of sending requests to the same endpoint.</p><h3 id="errors-handling" tabindex="-1">Errors handling <a class="header-anchor" href="#errors-handling" aria-label="Permalink to &quot;Errors handling&quot;">​</a></h3><p>option1: have an error field in your response struct and return business domain errors there option2: return business domain errors in the endpoint error return value.</p><p>Both methods can be made to work. But errors returned directly by endpoints are recognized by middlewares that check for failures, like circuit breakers. It’s unlikely that a business-domain error from your service should cause a circuit breaker to trip in a client. So, it’s likely that you want to encode errors in your response struct.</p><h3 id="supported-3rd-party-tools-platforms" tabindex="-1">Supported 3rd party tools/platforms <a class="header-anchor" href="#supported-3rd-party-tools-platforms" aria-label="Permalink to &quot;Supported 3rd party tools/platforms&quot;">​</a></h3><ul><li>transport protocol: http, gRPC, net/rpc, Thrift</li><li>service discovery: consul, etcd, zookeeper</li><li>observability: Prometheus(recommend), InfluxDB</li></ul><h3 id="panics-handling" tabindex="-1">Panics handling <a class="header-anchor" href="#panics-handling" aria-label="Permalink to &quot;Panics handling&quot;">​</a></h3><p>Once panic happened, you should allow them to crash your program or handler goroutine, and return a broken response to the calling client. So observability will notice the panic and alert you to fix them ASAP</p><p>But if you want to handle exceptions, best practice is to wrap the concrete transport with a transport-specific middleware that performs a recover. e.g</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> h </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Handler</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> httptransport.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">NewServer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> newRecoveringMiddleware</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(h, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// use h normally</span></span></code></pre></div><h3 id="db" tabindex="-1">db <a class="header-anchor" href="#db" aria-label="Permalink to &quot;db&quot;">​</a></h3><p>db connection is usually required only in your business logic, so you can create a simple persistence layer of db interface like this</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">	Insert</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Profile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">error</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">	Select</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Profile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">	Delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">error</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> databaseStore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{ db </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sql</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">DB</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">databaseStore</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Insert</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Profile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            { </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">databaseStore</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Select</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Profile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">databaseStore</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            { </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span></code></pre></div>`,18);function E(s,b,f,v,_,w){const p=t("Badge"),r=o,k=t("ClientOnly");return h(),g("div",null,[l("h1",B,[n("GoKit Intro "),e(p,{text:"GoKit",type:"warning"}),n(),F]),e(k,null,{default:c(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(h(),A(r,{key:0,article:s.$frontmatter},null,8,["article"])):D("",!0)]}),_:1}),m])}const I=d(u,[["render",E]]);export{x as __pageData,I as default};
