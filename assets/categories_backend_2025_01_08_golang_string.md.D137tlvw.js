import{_ as g}from"./chunks/ArticleMetadata.ZPzJ4qZI.js";import{_ as o,m as n,a as d,e as l,x as a,u as e,B as c,ah as u,o as r,p as A,q as y}from"./chunks/framework.BuAcqOzq.js";import"./chunks/theme.BdE4UlCJ.js";const S=JSON.parse('{"title":"strings pkg","description":"","frontmatter":{"title":"strings pkg","author":"ChocolateAceCream","date":"2025/01/08 19:00","isTop":false,"categories":["backend"],"tags":["Go","strings"]},"headers":[],"relativePath":"categories/backend/2025/01/08/golang_string.md","filePath":"categories/backend/2025/01/08/golang_string.md","lastUpdated":1736789224000}'),C={name:"categories/backend/2025/01/08/golang_string.md"},D={id:"go-strings-pkg",tabindex:"-1"},m=l("a",{class:"header-anchor",href:"#go-strings-pkg","aria-label":'Permalink to "Go strings pkg <Badge text="Go" type="warning" />"'},"​",-1),f=u(`<p>strings package is very useful when dealing with strings in golang world. In this blog I&#39;m going to introduce some common used functions from strings package. Since strings package documentation are well-written, we only need to know that function exist, and then look up the documentation when using it in coding.</p><h3 id="func-strings-count-s-string-substr-string-int" tabindex="-1">func strings.Count(s string, substr string) int <a class="header-anchor" href="#func-strings-count-s-string-substr-string-int" aria-label="Permalink to &quot;func strings.Count(s string, substr string) int&quot;">​</a></h3><p>count the number of non-overlapping instances of substr in s. p.s. when substring is &quot;&quot;, then result is len(s) + 1</p><blockquote><p>count := strings.Count(str, &quot;&quot;)</p></blockquote><h3 id="func-strings-split-s-string-sep-string-string" tabindex="-1">func strings.Split(s string, sep string) []string <a class="header-anchor" href="#func-strings-split-s-string-sep-string-string" aria-label="Permalink to &quot;func strings.Split(s string, sep string) []string&quot;">​</a></h3><p>Split slices s into all substrings separated by sep and returns a slice of the substrings between those separators.</p><blockquote><p>s := strings.Split(str, &quot;&quot;)</p></blockquote><h3 id="func-strings-repeat-s-string-count-int-string" tabindex="-1">func strings.Repeat(s string, count int) string <a class="header-anchor" href="#func-strings-repeat-s-string-count-int-string" aria-label="Permalink to &quot;func strings.Repeat(s string, count int) string&quot;">​</a></h3><p>Repeat returns a new string consisting of count copies of the string s.</p><p>It panics if count is negative or if the result of (len(s) * count) overflows.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">strings.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// still &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">strings.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// &quot;aa&quot;</span></span></code></pre></div><h3 id="func-compare-a-string-b-string-int" tabindex="-1">func Compare(a string, b string) int <a class="header-anchor" href="#func-compare-a-string-b-string-int" aria-label="Permalink to &quot;func Compare(a string, b string) int&quot;">​</a></h3><p>Compare returns an integer comparing two strings lexicographically. The result will be 0 if a == b, -1 if a &lt; b, and +1 if a &gt; b.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// a function to find min rotate string format of given string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> rotation</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    min </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(s); i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        tmp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(s[i:],s[:i]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> strings.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Compare</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(tmp), </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(min)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            min </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> tmp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(min)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div>`,14);function B(s,b,F,_,E,q){const p=n("Badge"),h=g,k=n("ClientOnly");return r(),d("div",null,[l("h1",D,[a("Go strings pkg "),e(p,{text:"Go",type:"warning"}),a(),m]),e(k,null,{default:c(()=>{var i,t;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((t=s.$frontmatter)==null?void 0:t.showArticleMetadata)??!0)?(r(),A(h,{key:0,article:s.$frontmatter},null,8,["article"])):y("",!0)]}),_:1}),f])}const P=o(C,[["render",B]]);export{S as __pageData,P as default};
