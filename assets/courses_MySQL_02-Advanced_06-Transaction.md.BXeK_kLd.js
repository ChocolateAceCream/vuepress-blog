import{_ as d}from"./chunks/ArticleMetadata.CiMjwiSO.js";import{_ as o,m as t,a as c,e as h,x as n,u as e,B as A,ah as g,o as l,p as y,q as D}from"./chunks/framework.BuAcqOzq.js";import"./chunks/theme.Bk1BB6W8.js";const I=JSON.parse('{"title":"Transaction","description":"","frontmatter":{"title":"Transaction","author":"ChocolateAceCream","date":"2024/02/21 10:24","isTop":true,"categories":["MySQL"],"tags":["MySQL"]},"headers":[],"relativePath":"courses/MySQL/02-Advanced/06-Transaction.md","filePath":"courses/MySQL/02-Advanced/06-Transaction.md","lastUpdated":1714762338000}'),C={name:"courses/MySQL/02-Advanced/06-Transaction.md"},u={id:"transaction",tabindex:"-1"},m=h("a",{class:"header-anchor",href:"#transaction","aria-label":'Permalink to "Transaction <Badge text="MySQL" type="warning" />"'},"​",-1),E=g(`<h3 id="acid" tabindex="-1">ACID <a class="header-anchor" href="#acid" aria-label="Permalink to &quot;ACID&quot;">​</a></h3><ul><li>Atomicity: do it all or don&#39;t do it</li><li>Isolation: each transaction is isolated performed, not affect others.</li><li>Consistency: make sure data compliant real world rules</li><li>Durability: data persistance(stored in hard disk)</li></ul><p>We call one or multiple db operations that need to keep ACID principle <em><strong>Transaction</strong></em></p><h5 id="trigger" tabindex="-1">Trigger <a class="header-anchor" href="#trigger" aria-label="Permalink to &quot;Trigger&quot;">​</a></h5><p>a trigger is a piece of sql that executed after/before action(insert/delete/update).</p><p>e.g. use trigger before insert to validate data</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TRIGGER</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> account_trigger_demo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> AFTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> INSERT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> account </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">FOR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> EACH </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ROW</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">BEGIN</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	IF</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">		NEW</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">balance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> account</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		SET</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> NEW</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">balance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	END</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> IF</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">END</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>P.S don&#39;t create dead loop. e.g. in after insert trigger, you update the data column, which will cause another insert trigger event. p.s. The SQLSTATE value &#39;45000&#39; is a general-purpose code in MySQL that represents &quot;unhandled user-defined exception&quot;. It&#39;s commonly used with the SIGNAL statement to raise custom errors.</p><p>&#39;00000&#39;: This class code means that the SQL statement completed successfully. &#39;23000&#39;: This class code is for integrity constraint violation. For example, it&#39;s used when you try to insert a duplicate key into a unique column. &#39;22001&#39;: This class code is for string data, right truncation. For example, it&#39;s used when you try to insert a string into a varchar column, but the string is longer than the column&#39;s maximum length. &#39;42000&#39;: This class code is for syntax error or access rule violation. For example, it&#39;s used when your SQL syntax is incorrect.</p><h3 id="transaction-status" tabindex="-1">Transaction Status <a class="header-anchor" href="#transaction-status" aria-label="Permalink to &quot;Transaction Status&quot;">​</a></h3><ul><li>active: db operation are executing</li><li>partially committed: the last operation of transaction finished, right before the data write back from buffer-pool into disk(changed data still in memory).</li><li>failed: if operation failed due to db error/OS error/power off/stop manually, and operations cannot continue executed, we need to roll back to restore data. During error happens and roll back process, is called failed status</li><li>abort: once roll back finished, transaction reached abort status</li><li>committed: once changed data write back to the disk, we call it committed</li></ul><h3 id="syntax" tabindex="-1">Syntax <a class="header-anchor" href="#syntax" aria-label="Permalink to &quot;Syntax&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">START TRANSACTION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> READ</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> WRITE, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">WITH</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CONSISTENT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SNAPSHOT</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- you sql starts here</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> account </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> account </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">COMMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><ul><li><p>READ ONLY/READ WRITE: whether transaction can write/read DB data. default is READ WRITE p.s. for temp table, even transaction is read only, it can still modify the temp table since temp table only exists in session.</p></li><li><p>ROLLBACK rollback can only be applied by programmer manually. When transaction facing some errors in executing, it will rollback itself, you don&#39;t need call rollback yourself. ROLLBACK only works when autocommit is turned off by</p></li></ul><blockquote><p>set autocommmit=0;</p></blockquote><p>then call rollback will roll everything back to last commit</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">START TRANSACTION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> READ</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> WRITE, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">WITH</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CONSISTENT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SNAPSHOT</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- you sql starts here</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> account </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> account </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ROLLBACK</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><h5 id="savepoint" tabindex="-1">SAVEPOINT <a class="header-anchor" href="#savepoint" aria-label="Permalink to &quot;SAVEPOINT&quot;">​</a></h5><p>used with rollback to rollback to certain point.</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">BEGIN</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> account </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">SAVEPOINT S1;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> account </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ROLLBACK</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> S1;</span></span></code></pre></div><h5 id="consistent-snapshot" tabindex="-1">CONSISTENT SNAPSHOT <a class="header-anchor" href="#consistent-snapshot" aria-label="Permalink to &quot;CONSISTENT SNAPSHOT&quot;">​</a></h5><p>the main difference for BEGIN and START TRANSACTION is that START TRANSACTION can apply CONSISTENT SNAPSHOT method.</p><p>CONSISTENT SNAPSHOT is a read-only view of the database at the start of transaction. e.g. all select statement inside transaction will see the same db even though other transactions modified db on at the same time. e.g.</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">START TRANSACTION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> WITH</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CONSISTENT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SNAPSHOT</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> orders;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> users;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- ... more SELECT statements ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">COMMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>In this example, all the SELECT statements within the transaction see the same consistent snapshot of the orders table, even if other transactions are adding, modifying, or deleting rows in the orders table at the same time.</p><p>p.s AUTOCOMMIT is set to off automatically when executing an transaction p.s. CONSISTENT SNAPSHOT can prevent dirty read.</p><h3 id="implicit-commit" tabindex="-1">implicit commit <a class="header-anchor" href="#implicit-commit" aria-label="Permalink to &quot;implicit commit&quot;">​</a></h3><p>We know once start a transaction, autocommit is turned off. However, some syntax will trigger commit action just like COMMIT syntax, which will commit all previous changes. Such syntax including:</p><ul><li>DDL: CREATE/ALTER/DROP etc...</li><li>change mysql system tables: ALTER USER/GRANT/SET PASSWORD etc...</li><li>nested transaction:</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ...;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ...;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- SECOND BEGIN will commit select and update.</span></span></code></pre></div><ul><li>lock/unlock: LOCK TABLES/UNLOCK TABLES etc...</li><li>load data into db: LODA DATA</li></ul>`,31);function F(s,T,B,b,S,f){const p=t("Badge"),k=d,r=t("ClientOnly");return l(),c("div",null,[h("h1",u,[n("Transaction "),e(p,{text:"MySQL",type:"warning"}),n(),m]),e(r,null,{default:A(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),y(k,{key:0,article:s.$frontmatter},null,8,["article"])):D("",!0)]}),_:1}),E])}const R=o(C,[["render",F]]);export{I as __pageData,R as default};
