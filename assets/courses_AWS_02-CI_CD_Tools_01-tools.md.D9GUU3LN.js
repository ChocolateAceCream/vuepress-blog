import{_ as d}from"./chunks/ArticleMetadata.j3Ov-vUj.js";import{_ as o,m as n,a as c,e as h,x as e,u as l,B as y,ah as A,o as t,p as D,q as g}from"./chunks/framework.BuAcqOzq.js";import"./chunks/theme.D7QXwtHB.js";const P=JSON.parse('{"title":"AWS CI/CD Pipeline Tools","description":"","frontmatter":{"title":"AWS CI/CD Pipeline Tools","author":"ChocolateAceCream","date":"2024/05/05 10:25","categories":["AWS"],"tags":["AWS","CI/CD"]},"headers":[],"relativePath":"courses/AWS/02-CI_CD_Tools/01-tools.md","filePath":"courses/AWS/02-CI_CD_Tools/01-tools.md","lastUpdated":1715107407000}'),u={name:"courses/AWS/02-CI_CD_Tools/01-tools.md"},C={id:"aws-cloudformation-fundamentals",tabindex:"-1"},m=h("a",{class:"header-anchor",href:"#aws-cloudformation-fundamentals","aria-label":'Permalink to "AWS CloudFormation Fundamentals <Badge text="CI/CD" type="warning" />"'},"​",-1),B=A(`<p>Available tools for build automated CI/CD pipeline</p><h2 id="codecommit" tabindex="-1">CodeCommit <a class="header-anchor" href="#codecommit" aria-label="Permalink to &quot;CodeCommit&quot;">​</a></h2><p>a fully managed source control service that hosts secure Git-based repos. It supports all git commands and works with your existing Git tools.</p><h4 id="benefits" tabindex="-1">Benefits <a class="header-anchor" href="#benefits" aria-label="Permalink to &quot;Benefits&quot;">​</a></h4><ul><li>secure: automatically encrypts your files in transit and at rest, also integrated with IAM for access control for repos</li><li>has a highly scalable, redundant, and durable architecture.</li><li>code views, and control who can make changes to specific branches</li></ul><h2 id="codebuild" tabindex="-1">CodeBuild <a class="header-anchor" href="#codebuild" aria-label="Permalink to &quot;CodeBuild&quot;">​</a></h2><p>CI service that compiles source code, run tests and produces software pkg that to be deployed.</p><h4 id="benefits-1" tabindex="-1">Benefits <a class="header-anchor" href="#benefits-1" aria-label="Permalink to &quot;Benefits&quot;">​</a></h4><ul><li>can run separate builds concurrently, and can auto scale up</li><li>can use customized build env, tools and runtimes</li><li>secure: build artifaces are encrypted with customer-specific keys that managed by AWS KMS(key management service). Also it&#39;s integrated with IAM to control access to your build projects</li></ul><h3 id="buildspec-yml" tabindex="-1">buildspec.yml <a class="header-anchor" href="#buildspec-yml" aria-label="Permalink to &quot;buildspec.yml&quot;">​</a></h3><p>yaml formatted file used by COdeBUild that includes a collection of build commands and related settings that CodeBuild uses to run a build. You can include a buildspec as part of the source code (buildspec.yml in root folder) or define a buildspec when you create a build project (which will overriden the buildspec from root folder, ).</p><h5 id="sample-yml-file" tabindex="-1">sample yml file <a class="header-anchor" href="#sample-yml-file" aria-label="Permalink to &quot;sample yml file&quot;">​</a></h5><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0.2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  variables</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    JAVA_HOME</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/usr/lib/jvm/java-8-openjdk-amd64&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  parameter-store</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    LOGIN_PASSWORD</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/CodeBuild/dockerLoginPassword</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">phases</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  install</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    commands</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">echo Entered the install phase...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">apt-get update -y</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">apt-get install -y maven</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    finally</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">echo This always runs even if the update or install command fails</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  pre_build</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    commands</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">echo Entered the pre_build phase...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">docker login –u User –p $LOGIN_PASSWORD</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    finally</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">echo This always runs even if the login command fails</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  build</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    commands</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">echo Entered the build phase...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">echo Build started on \`date\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">mvn install</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    finally</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">echo This always runs even if the install command fails</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  post_build</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    commands</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">echo Entered the post_build phase...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">echo Build completed on \`date\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">reports</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  arn:aws:codebuild:your-region:your-aws-account-id:report-group/report-group-name-1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    files</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;**/*&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    base-directory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;target/tests/reports&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    discard-paths</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">no</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  reportGroupCucumberJson</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    files</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;cucumber/target/cucumber-tests.xml&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    discard-paths</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">yes</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    file-format</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">CucumberJson</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> # default is JunitXml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifacts</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  files</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">target/messageUtil-1.0.jar</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  discard-paths</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">yes</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  secondary-artifacts</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    artifact1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      files</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">target/artifact-1.0.jar</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      discard-paths</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">yes</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    artifact2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      files</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">target/artifact-2.0.jar</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      discard-paths</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">yes</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">cache</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  paths</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;/root/.m2/**/*&#39;</span></span></code></pre></div><p>break-down:</p><ul><li>cache: build cache location, can use s3, reusable between projects</li><li>artifacts: output uploading location. discard-paths = yes means the build artifacts are placed in the same dir</li><li>phases: representing different build phases, so CodeBase run commands accordingly.</li></ul><h2 id="codedeploy" tabindex="-1">CodeDeploy <a class="header-anchor" href="#codedeploy" aria-label="Permalink to &quot;CodeDeploy&quot;">​</a></h2><p>a fully managed deployment service that automates software deployments to a variety of compute services</p><h4 id="benefits-2" tabindex="-1">Benefits <a class="header-anchor" href="#benefits-2" aria-label="Permalink to &quot;Benefits&quot;">​</a></h4><ul><li>can easily stopped and rolled back if errors happened</li><li>easily launch and track the status of deployment, even real-time notifications</li><li>can integrate with your existing toolchain(github, jenkins, codepiplelin)</li></ul>`,19);function f(s,F,b,E,_,v){const p=n("Badge"),k=d,r=n("ClientOnly");return t(),c("div",null,[h("h1",C,[e("AWS CloudFormation Fundamentals "),l(p,{text:"CI/CD",type:"warning"}),e(),m]),l(r,null,{default:y(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(t(),D(k,{key:0,article:s.$frontmatter},null,8,["article"])):g("",!0)]}),_:1}),B])}const x=o(u,[["render",f]]);export{P as __pageData,x as default};
