import{_ as o}from"./chunks/ArticleMetadata.DCa9ddbI.js";import{_ as k,m as i,a as c,e as h,x as e,u as n,B as g,ah as u,o as l,p as y,q as m}from"./chunks/framework.BuAcqOzq.js";import"./chunks/theme.CZtxdv8p.js";const S=JSON.parse('{"title":"Full-test search","description":"","frontmatter":{"title":"Full-test search","author":"ChocolateAceCream","date":"2025/04/23 19:30","isTop":true,"categories":["PostgreSQL"],"tags":["PostgreSQL"]},"headers":[],"relativePath":"courses/PostgreSQL/01-Basic/05-gin.md","filePath":"courses/PostgreSQL/01-Basic/05-gin.md","lastUpdated":1745632765000}'),A={name:"courses/PostgreSQL/01-Basic/05-gin.md"},D={id:"full-test-search-with-gin-and-tsvector",tabindex:"-1"},f=h("a",{class:"header-anchor",href:"#full-test-search-with-gin-and-tsvector","aria-label":'Permalink to "Full-test search with GIN and tsvector <Badge text="PostgreSQL" type="warning" />"'},"​",-1),F=u(`<p>PostgreSQL provides powerful built-in full-text search capabilities using tsvector data types and GIN (Generalized Inverted Index) indexes.</p><h2 id="gin" tabindex="-1">GIN <a class="header-anchor" href="#gin" aria-label="Permalink to &quot;GIN&quot;">​</a></h2><p>general idea of GIN is that each word is extracted and mapped with row number sets which contains that word. It has slower write speed compared to B-tree but much faster query speed in return.</p><p>Optimized for these operators:</p><p>Arrays: @&gt; (contains), &lt;@ (contained by), &amp;&amp; (overlap), = (equals)</p><p>JSONB: @&gt;, ?, ?|, ?&amp;</p><h3 id="full-text-matches" tabindex="-1">Full-text: @@ (matches) <a class="header-anchor" href="#full-text-matches" aria-label="Permalink to &quot;Full-text: @@ (matches)&quot;">​</a></h3><p>e.g.</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> article</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  to_tsvector(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;english&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, article_content) @@ to_tsquery(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;english&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;aaa&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>assume article_content is a word or paragraph, then @@ means find if the content exist any word matched &#39;aaa&#39;</p><h4 id="things-to-keep-in-mind" tabindex="-1">Things to keep in mind <a class="header-anchor" href="#things-to-keep-in-mind" aria-label="Permalink to &quot;Things to keep in mind&quot;">​</a></h4><p>Directly using to_tsvector like the example above is not optimal, since tsvector is calculated on-the-fly. A better approach is to add a column that store tsvector of content then create a gin index on that column</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">alter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> article</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> column article_content_tsvector</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">generated</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> always</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (to_tsvector(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;english&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, article_content)) stored;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> index</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> article_content_gin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> on</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> article </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gin (article_content_tsvector)</span></span></code></pre></div><h5 id="key-components" tabindex="-1">Key Components <a class="header-anchor" href="#key-components" aria-label="Permalink to &quot;Key Components&quot;">​</a></h5><ul><li><p>Generated Column: A column whose value is always computed from other columns Automatically updated when the source data changes</p></li><li><p>GENERATED ALWAYS AS: Defines the expression that computes the column value PostgreSQL will enforce that this value cannot be manually set</p></li><li><p>STORED: The computed value is physically stored on disk Alternative is VIRTUAL (not stored, computed on read) but PostgreSQL only supports STORED for generated columns</p></li><li><p>to_tsvector(&#39;english&#39;, dots): Creates a full-text search vector using English language rules Parses the dots column content into searchable tokens</p></li><li><p>create gin index need to pass in a tsvector type column as indexed column</p></li></ul><p>Now a full-text search will hit the index and much faster.</p><h3 id="fastupdate" tabindex="-1">fastupdate <a class="header-anchor" href="#fastupdate" aria-label="Permalink to &quot;fastupdate&quot;">​</a></h3><p>turn fastupdate on and off for certain use cases</p><ul><li>fastupdate=on (default) prioritize index update speed by using pending lists. However, this will slow the search speed since it will now scan both the index and growing pending lists</li><li>fastupdate=off prioritize search speed. No more pending list, hence the update will be slower. Essential for read-heavy workloads or benchmarking search performance e.g.</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> index</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> idx_gin_article_content</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> article </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gin (article_content_tsvector)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (fastupdate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=off</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><h3 id="jsonb-data" tabindex="-1">jsonb data <a class="header-anchor" href="#jsonb-data" aria-label="Permalink to &quot;jsonb data&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> INDEX</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> idx_gin_profile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">USING</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> GIN(profile_jsonb);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- Find users with &quot;premium&quot; in their profile</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> profile_jsonb @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;{&quot;subscription&quot;: &quot;premium&quot;}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>a more complicated sql may look like this</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> t_verify_capture_codes</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  dots_jsonb#</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;{0}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;13&#39;</span></span></code></pre></div><table><thead><tr><th>Operator</th><th>Meaning</th><th>Example</th><th>Result</th></tr></thead><tbody><tr><td>-&gt;</td><td>Get JSON object/array by key/index (as JSON)</td><td>data-&gt;&#39;name&#39;</td><td>&quot;Alice&quot;</td></tr><tr><td>-&gt;&gt;</td><td>Get JSON value by key/index (as text)</td><td>data-&gt;&gt;&#39;name&#39;</td><td>Alice</td></tr><tr><td>#&gt;</td><td>Get nested JSON object (as JSON)</td><td>data#&gt;&#39;{address,city}&#39;</td><td>&quot;Tokyo&quot;</td></tr><tr><td>#&gt;&gt;</td><td>Get nested JSON value (as text)</td><td>data#&gt;&gt;&#39;{address,city}&#39;</td><td>Tokyo</td></tr><tr><td>@&gt;</td><td>Contains (JSONB only)</td><td>data @&gt; &#39;{&quot;role&quot;:&quot;admin&quot;}&#39;</td><td>true/false</td></tr><tr><td>&lt;@</td><td>Is contained by</td><td>data &lt;@ &#39;{&quot;role&quot;:&quot;admin&quot;}&#39;</td><td>true/false</td></tr><tr><td>?</td><td>Has key</td><td>data ? &#39;role&#39;</td><td>true/false</td></tr><tr><td>\`?</td><td>\`</td><td>Has any key from array</td><td>\`data ?</td></tr><tr><td>?&amp;</td><td>Has all keys from array</td><td>data ?&amp; array[&#39;a&#39;,&#39;b&#39;]</td><td>true/false</td></tr></tbody></table>`,25);function b(t,_,v,C,q,B){const d=i("Badge"),r=o,p=i("ClientOnly");return l(),c("div",null,[h("h1",D,[e("Full-test search with GIN and tsvector "),n(d,{text:"PostgreSQL",type:"warning"}),e(),f]),n(p,null,{default:g(()=>{var s,a;return[(((s=t.$frontmatter)==null?void 0:s.aside)??!0)&&(((a=t.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),y(r,{key:0,article:t.$frontmatter},null,8,["article"])):m("",!0)]}),_:1}),F])}const N=k(A,[["render",b]]);export{S as __pageData,N as default};
