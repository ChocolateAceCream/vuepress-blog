import{_ as o}from"./chunks/ArticleMetadata.DoEvLPX2.js";import{_ as p,m as h,a as r,u as k,B as c,e,x as d,ah as u,o as t,p as g,q as y}from"./chunks/framework.BuAcqOzq.js";import"./chunks/theme.8lEzCCFi.js";const w=JSON.parse('{"title":"Consul","description":"","frontmatter":{"title":"Consul","author":"ChocolateAceCream","date":"2024/11/10 16:25","categories":["Consul"],"tags":["AWS","Go","EKS","VPC","Consul"]},"headers":[],"relativePath":"courses/AWS/06-EKS/02-Consul.md","filePath":"courses/AWS/06-EKS/02-Consul.md","lastUpdated":1732341523000}'),F={name:"courses/AWS/06-EKS/02-Consul.md"},C=e("h1",{id:"consul-setup",tabindex:"-1"},[d("Consul setup "),e("a",{class:"header-anchor",href:"#consul-setup","aria-label":'Permalink to "Consul setup"'},"​")],-1),m=u(`<h2 id="purpose" tabindex="-1">Purpose <a class="header-anchor" href="#purpose" aria-label="Permalink to &quot;Purpose&quot;">​</a></h2><p>use consul api-gateway as backend api entry point, then implement traffic split and service mesh, as well as observation system using prometheus/grafana/loki in a EKS environment</p><h2 id="things-to-notice" tabindex="-1">Things to notice <a class="header-anchor" href="#things-to-notice" aria-label="Permalink to &quot;Things to notice&quot;">​</a></h2><p>It&#39;s common practice to put all backend api services behind consul api-gateway, so gateway can take care of routing, auth, certificates etc... For the frontend code, there&#39;s no need to put it behind a gateway, so a stand-alone nginx service is good enough, or other option is to put it in s3 + CDN.</p><h2 id="steps" tabindex="-1">Steps <a class="header-anchor" href="#steps" aria-label="Permalink to &quot;Steps&quot;">​</a></h2><ol><li>Setup EKS and VPC using terraform then connect to eks</li></ol><blockquote><p>aws eks --region $(terraform output -raw region) update-kubeconfig --name $(terraform output -raw kubernetes_cluster_id)</p></blockquote><ol start="2"><li>setup portainer</li></ol><blockquote><p>kubectl apply -f <a href="https://downloads.portainer.io/ce2-16/portainer-agent-k8s-lb.yaml" target="_blank" rel="noreferrer">https://downloads.portainer.io/ce2-16/portainer-agent-k8s-lb.yaml</a></p></blockquote><ol start="3"><li>install consul using helm</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --values</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> consul-value.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> consul</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> hashicorp/consul</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --create-namespace</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> consul</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --version</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;1.2.0&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CONSUL_HTTP_TOKEN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> get</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> consul</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> secrets/consul-bootstrap-acl-token</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --template=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{{.data.token}} | base64 -d)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CONSUL_HTTP_ADDR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">https://$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> services/consul-ui</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> consul</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> jsonpath=&#39;{.status.loadBalancer.ingress[0].hostname}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>so you can retrieve url and token which used for consul ui login</p><ol start="4"><li>install ebs</li></ol><blockquote><p>kubectl apply -f ebs.yaml</p></blockquote><ol start="5"><li>install api gateway</li></ol><blockquote><p>kubectl apply -f consul-api-gateway.yaml</p></blockquote><ol start="6"><li>install demo services</li></ol><blockquote><p>kubectl apply -f echo-service.yaml</p></blockquote><p>demo services includes:</p><ul><li>service resolver (used to identify subsets)</li><li>ervice splitter (used to split traffic to different subset based on weight)</li><li>service defaults - used to specify the protocol to used (http)</li><li>service - used to register in consul service mesh</li><li>service account - used by consul to manage the sidecar proxy injected into each service pod</li><li>two deployment of pods - service resolver will identify subsets based on this annotation <strong>&quot;consul.hashicorp.com/service-meta-version&quot;: &quot;xxx&quot;</strong></li></ul><ol start="7"><li>create intentions to assign api-gateway permission to visit echo services</li></ol><blockquote><p>kubectl apply -f intentions.yaml</p></blockquote><ol start="8"><li>create routes to define gateway re-routing rules</li></ol><blockquote><p>kubectl apply -f routes.yaml</p></blockquote><ol start="9"><li>test if traffic is split using api-gateway svc external ip</li></ol><blockquote><p>kubectl get svc -n consul</p></blockquote><p>then copy the link and run this script</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># Define the URL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;https://link-from-previous-step:8443/echo-demo&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># Loop 10 times</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">1..10}</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">do</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    # Send the request and parse the &quot;service&quot; field using jq</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    service</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -s</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -k</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">$url</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> jq</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;.service&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Request </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">$i</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">: Service = </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">$service</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">done</span></span></code></pre></div><p>you should see which pod the request goes to</p><ol start="10"><li>install observation stack</li></ol><blockquote><p>install-prom-gra-loki.sh</p></blockquote><ol start="11"><li>forward port of grafana svc so you can check dashboard locally</li></ol><blockquote><p>kubectl port-forward svc/grafana 3000:3000</p></blockquote><p>All files are attached at <a href="/vuepress-blog/source_code/2024/11/14/eks.zip">eks.zip</a></p>`,34);function b(s,D,f,A,v,q){const l=o,n=h("ClientOnly");return t(),r("div",null,[C,k(n,null,{default:c(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(t(),g(l,{key:0,article:s.$frontmatter},null,8,["article"])):y("",!0)]}),_:1}),m])}const S=p(F,[["render",b]]);export{w as __pageData,S as default};
