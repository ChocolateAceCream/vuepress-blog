import{_ as d}from"./chunks/ArticleMetadata.S3c7fTxY.js";import{_ as o,m as t,a as y,e as p,x as e,u as n,B as c,ah as g,o as l,p as u,q as A}from"./chunks/framework.BuAcqOzq.js";import"./chunks/theme.FyYixgBI.js";const w=JSON.parse('{"title":"TS Utility Types","description":"","frontmatter":{"title":"TS Utility Types","author":"ChocolateAceCream","date":"2024/03/01 19:00","isTop":false,"categories":["frontend"],"tags":["TypeScript"]},"headers":[],"relativePath":"categories/frontend/2024/03/01/TS_Build-in_utility_types.md","filePath":"categories/frontend/2024/03/01/TS_Build-in_utility_types.md","lastUpdated":1714621751000}'),C={name:"categories/frontend/2024/03/01/TS_Build-in_utility_types.md"},F={id:"build-in-utility-types",tabindex:"-1"},m=p("a",{class:"header-anchor",href:"#build-in-utility-types","aria-label":'Permalink to "Build-in Utility Types <Badge text="TypeScript" type="warning" />"'},"â€‹",-1),D=g(`<p>when a type feels like can be widely used in many cases. Typescript integrate the type as built-in types</p><ul><li>Partial</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Partial&lt;Type&gt;: make Type params all optional</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Sticker</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">  createdAt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">  updatedAt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">  submitter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> undefined</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> StickerUpdateParam</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Partial</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Sticker</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// now all fields in Sticker is optional</span></span></code></pre></div><ul><li>Readonly: convert all fields in a type to be readonly, which means the value of field cannot be re-assigned after its initialization in constructor</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Readonly</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Readonly</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Sticker</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// normally you can use to set a field to be readonly</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Example</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  readonly</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><ul><li><p>Record&lt;param1, param2&gt;: create a type using keys from an array (first param) and give each key the value from second param</p></li><li><p>Pick&lt;T, Keys&gt;: pick types from T which has key in Keys. e.g.</p></li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> StickerSortPreview</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Pick</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Sticker</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;name&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;updatedAt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// use | means Keys can be name or updatedAt. So both should be included in type StickerSortPreview</span></span></code></pre></div><ul><li><code>Omit&lt;T, Keys&gt;</code>: same as above, filter out T&#39;s types which key in Keys.</li></ul><blockquote><p>type OmitDemo = Omit&lt;Sticker, &quot;name&quot; | &quot;updatedAt&quot;&gt;</p></blockquote><p>use <code>|</code> to filter out both types</p><ul><li><p><code>Exclude&lt;T1, T2&gt;</code>: remove props from T1 which is also included in T2</p></li><li><p><code>Extract&lt;T1, T2&gt;</code>: return same props from T1 and T2, if not found, return never</p></li><li><p><code>NonNullable&lt;T&gt;</code>: filter out null and undefined from T</p></li><li><p><code>Required&lt;T&gt;</code>: convert all optional props in T to required</p></li></ul>`,11);function _(s,B,f,T,E,b){const h=t("Badge"),k=d,r=t("ClientOnly");return l(),y("div",null,[p("h1",F,[e("Build-in Utility Types "),n(h,{text:"TypeScript",type:"warning"}),e(),m]),n(r,null,{default:c(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),u(k,{key:0,article:s.$frontmatter},null,8,["article"])):A("",!0)]}),_:1}),D])}const P=o(C,[["render",_]]);export{w as __pageData,P as default};
