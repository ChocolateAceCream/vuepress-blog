import{_ as d}from"./chunks/ArticleMetadata.CISF5KRw.js";import{_ as c,m as a,a as k,e as h,x as t,u as n,B as m,ah as g,o as l,p as F,q as u}from"./chunks/framework.BuAcqOzq.js";import"./chunks/theme.CBLuRXYe.js";const x=JSON.parse('{"title":"Rate Limiter with Redis","description":"","frontmatter":{"title":"Rate Limiter with Redis","author":"ChocolateAceCream","date":"2024/02/10 19:00","isTop":false,"categories":["backend"],"tags":["Redis","Sorted-set","Rate Limiter"]},"headers":[],"relativePath":"categories/backend/2024/02/10/Rate_limiter.md","filePath":"categories/backend/2024/02/10/Rate_limiter.md","lastUpdated":1714705686000}'),y={name:"categories/backend/2024/02/10/Rate_limiter.md"},C={id:"implement-rate-limiter-using-redis-sorted-set",tabindex:"-1"},b=h("a",{class:"header-anchor",href:"#implement-rate-limiter-using-redis-sorted-set","aria-label":'Permalink to "Implement Rate Limiter using Redis sorted-set <Badge text="Redis" type="warning" />"'},"​",-1),v=g(`<p>Required Version: &gt;2.1.6</p><p>The sorted set is a data structure in Redis that stores a collection of unique elements, each associated with a score(float). Elements are sorted based on their scores</p><h3 id="add-key-value-pair-to-set" tabindex="-1">add key-value pair to set <a class="header-anchor" href="#add-key-value-pair-to-set" aria-label="Permalink to &quot;add key-value pair to set&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">ZADD</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> myset</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;element1&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;element2&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;element3&quot;</span></span></code></pre></div><p>myset: key in redis element1: element 1: score of element</p><h3 id="remove-by-score-range" tabindex="-1">remove by score range <a class="header-anchor" href="#remove-by-score-range" aria-label="Permalink to &quot;remove by score range&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">ZREMRANGEBYSCORE</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> myset</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3</span></span></code></pre></div><p>myset: key in redis 1: min score 3: max score this command remove all elements with score between 1 and 3 (inclusive)</p><h3 id="fetch-elements" tabindex="-1">fetch elements <a class="header-anchor" href="#fetch-elements" aria-label="Permalink to &quot;fetch elements&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">ZRANGE</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> myset</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -1</span></span></code></pre></div><p>myset: key 0: start index -1: end index</p><h3 id="set-ttl" tabindex="-1">Set TTL <a class="header-anchor" href="#set-ttl" aria-label="Permalink to &quot;Set TTL&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">MULTI</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">ZADD</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> myset</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;a&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;b&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;c&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">EXPIRE</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> myset</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 60</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">EXEC</span></span></code></pre></div><h3 id="implement-rate-limiter" tabindex="-1">Implement rate limiter <a class="header-anchor" href="#implement-rate-limiter" aria-label="Permalink to &quot;Implement rate limiter&quot;">​</a></h3><p>Purpose: implement a rate limiter that allow 10 actions in 1 time interval (60 seconds), and the two close actions has minimum 3 seconds time differential. Steps:</p><ol><li>we first generate a sorted set in redis using timestamp of coming action as both value and score.</li><li>when new action comes in, we first drop all elements of the set which occurred before one interval ago. assume timestamp in ms and current action&#39;s timestamp is 1707674862497</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">ZREMRANGEBYSOCRE</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> myset</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 1707674862497-60</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">1000</span></span></code></pre></div><ol start="3"><li>fetch all elements of myset and set a TTL of one time interval to myset</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">ZRANGE</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> myset</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">EXPIRE</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> myset</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 60</span></span></code></pre></div><ol start="4"><li>add new action to myset</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">ZADD</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> myset</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1707674862497</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1707674862497</span></span></code></pre></div><ol start="5"><li>since we fetched before add, now the last element in fetch result is the previous one action, we compare its timestamp with current one, if differential bigger than 3 sec, we not allow the new action. Also, with count of fetch results + 1, if bigger than allowed actions 10, the new action is not allowed.</li></ol><p>By this approach, if a user keep send new req, none of new req will get executed.</p><p>P.S should wrap redis actions in between MULTI EXEC</p><h3 id="common-rate-limit-related-headers" tabindex="-1">Common rate limit related headers <a class="header-anchor" href="#common-rate-limit-related-headers" aria-label="Permalink to &quot;Common rate limit related headers&quot;">​</a></h3><p>http code 429: too many request X-Ratelimit-Remaining X-Ratelimit-limit X-Ratelimit-Retry-After: number of second to wait</p>`,26);function f(e,_,D,w,R,q){const r=a("Badge"),o=d,p=a("ClientOnly");return l(),k("div",null,[h("h1",C,[t("Implement Rate Limiter using Redis sorted-set "),n(r,{text:"Redis",type:"warning"}),t(),b]),n(p,null,{default:m(()=>{var s,i;return[(((s=e.$frontmatter)==null?void 0:s.aside)??!0)&&(((i=e.$frontmatter)==null?void 0:i.showArticleMetadata)??!0)?(l(),F(o,{key:0,article:e.$frontmatter},null,8,["article"])):u("",!0)]}),_:1}),v])}const A=c(y,[["render",f]]);export{x as __pageData,A as default};
