import{_ as d}from"./chunks/ArticleMetadata.41rSz6Gb.js";import{_ as g,D as e,o as n,c,k as h,a as i,I as l,w as A,R as p,b as y,e as u}from"./chunks/framework.lWSK3XUC.js";import"./chunks/md5.US-HucPO.js";const R=JSON.parse('{"title":"Gorm Use Cases","description":"","frontmatter":{"title":"Gorm Use Cases","author":"ChocolateAceCream","date":"2023/07/12 19:00","isTop":false,"categories":["backend"],"tags":["Go","Gorm","Pagination","MySQL","Cascade Delete"]},"headers":[],"relativePath":"categories/backend/2023/07/12/Gorm_use_cases.md","filePath":"categories/backend/2023/07/12/Gorm_use_cases.md","lastUpdated":1714705686000}'),C={name:"categories/backend/2023/07/12/Gorm_use_cases.md"},D={id:"gorm-use-cases-sample-codes",tabindex:"-1"},F=h("a",{class:"header-anchor",href:"#gorm-use-cases-sample-codes","aria-label":'Permalink to "Gorm Use Cases Sample Codes <Badge text="Gorm" type="warning" />"'},"​",-1),m=p(`<h2 id="gorm-raw-sql-pagination" tabindex="-1">Gorm raw sql pagination <a class="header-anchor" href="#gorm-raw-sql-pagination" aria-label="Permalink to &quot;Gorm raw sql pagination&quot;">​</a></h2><h3 id="purpose" tabindex="-1">purpose <a class="header-anchor" href="#purpose" aria-label="Permalink to &quot;purpose&quot;">​</a></h3><p>using gorm to execute raw sql to implement a pagination service.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (es </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ArticleService) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">GetArticleSearchList</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(authorId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, query request.ArticleSearchParma) (articleBaseInfo []response.ArticleBaseInfo, total </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int64</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	articleList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> []dbTable.Article{}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	sql </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> \`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	SELECT SQL_CALC_FOUND_ROWS * FROM articles a</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	WHERE 1=1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	AND</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	AND</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	deleted_at IS NULL</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	author_id = ?</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	AND</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	published = ?</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	AND</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	CONCAT_WS(&#39;&#39;, a.content, a.title) LIKE CONCAT(&#39;%&#39;, ?, &#39;%&#39;)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	ORDER BY created_at DESC</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	LIMIT ? OFFSET ?</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	limit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> query.PageSize</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	offset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> query.PageSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (query.PageNumber </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	db </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> global.DB.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Raw</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(sql, authorId, query.Published, query.Keywords, limit, offset).</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Scan</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">articleList)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> db.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Raw</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;select found_rows() as count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Scan</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">total).Error</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	articleBaseInfo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> utils.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">MapSlice</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(articleList, response.ArticleBaseInfoFormatter)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h4 id="explanation" tabindex="-1">explanation: <a class="header-anchor" href="#explanation" aria-label="Permalink to &quot;explanation:&quot;">​</a></h4><blockquote><p>CONCAT_WS(&#39;&#39;, a.content, a.title) LIKE CONCAT(&#39;%&#39;, ?, &#39;%&#39;)</p></blockquote><p>implement a fuzzy search on any keywords showed up in content or title field</p><blockquote><p>SELECT SQL_CALC_FOUND_ROWS * FROM articles a</p></blockquote><p>in order to use FOUND_ROWS() build-in function of mysql, SQL_CALC_FOUND_ROWS has to be added to the first select statement.</p><blockquote><p>err = db.Raw(&quot;select found_rows() as count&quot;).Scan(&amp;total).Error</p></blockquote><p>calculating total number of search records</p><p>p.s. using raw sql will omit gorm soft delete feature, so it&#39;s necessary to add deleted_at IS NULL to the search conditions.</p><br>`,13),B=p(`<p>P.S.1 if we omit SQL_CALC_FOUND_ROWS from first select, then FOUND_ROWS（） will return the actual number of record returned from first select.</p><p>p.s.2 FOUND_ROWS（）returns a temporary result, and will be ditched after another select statement. so if we want to save the record, we can use</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> SQL_CALC_FOUND_ROWS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ... ;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> @rows </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FOUND_ROWS();</span></span></code></pre></div><h2 id="updatecolumn" tabindex="-1">UpdateColumn <a class="header-anchor" href="#updatecolumn" aria-label="Permalink to &quot;UpdateColumn&quot;">​</a></h2><p>Update single column in a table, e.g. add 1 to viewed_count column in article table for each time article got previewed</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ArticleService) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">ViewedTimesPlusOne</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(articleId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	global.DB.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Model</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">dbTable.Article{}).</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Where</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;ID = ? &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, articleId).</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">UpdateColumn</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;viewed_times&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, gorm.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Expr</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;viewed_times + ?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="cascade-delete" tabindex="-1">Cascade delete <a class="header-anchor" href="#cascade-delete" aria-label="Permalink to &quot;Cascade delete&quot;">​</a></h2><p>delete a record and its associations in a m2m relations</p><p>e.g. for the following role and menu many2many relations</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Menu</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	ID        </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">uint</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      \`json:&quot;id&quot; gorm:&quot;primarykey&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	Pid       </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">uint</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      \`json:&quot;pid&quot; gorm:&quot;comment:parent id&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	Name      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    \`json:&quot;name&quot; gorm:&quot;comment:route name&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	Roles     []Role </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`json:&quot;roles&quot; gorm:&quot;many2many:roleMenu;constraint:OnDelete:CASCADE;&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// ChildMenu []Menu \`gorm:&quot;foreignkey:Pid;constraint:OnDelete:CASCADE;&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Role</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	ID        </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">uint</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">       \`json:&quot;roleId&quot; gorm:&quot;primarykey;comment:role ID;size:90;&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	ParentId  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">uint</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">       \`json:&quot;parentId&quot; gorm:&quot;comment:parent role id&quot; binding:&quot;required&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	Children  []Role     </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`json:&quot;children&quot; gorm:&quot;-&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	Menus     []Menu     </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`json:&quot;-&quot; gorm:&quot;many2many:roleMenu&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>if we want to delete a menu, we also want to delete all its submenus and related role associations to that menu and all its submenus.</p><p>To achieve that, we let frontend do the logic work and pass a id array which includes menu id and all its submenus&#39; ids. Then we can delete like this:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (menuService MenuService) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">DeleteMenu</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(id []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) (err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	menus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> []dbTable.Menu{}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _, v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		menus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(menus, dbTable.Menu{ID: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(v)})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> global.DB.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Select</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Roles&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">menus).Error</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>However, this approach only works when Menu is <em><strong>not set to soft delete</strong></em> (without a <strong>deleteAt</strong> field)</p><p><em><strong>P.S</strong></em> If menu has itself as a foreign key (uncomment the ChildMenu field), then we can automatic delete a menu and all its submenus recursively by using:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> global.DB.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Where</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;id = ?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, id).</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">dbTable.Menu{}).Error</span></span></code></pre></div><p>However, this approach has its limitations that only it only deleting menu&#39;s direct associations (Role and ChildMenu), but not deleting each of their associated Roles (e.g. ChildMenu&#39;s Role)</p><p>if you have a large number of associated records, when delete using preload() or <code>constraint:OnDelete:CASCADE;</code> may cause N+1 problem. This is because GORM will execute a separate query for each associated record to delete them individually.</p><h2 id="cascade-preload" tabindex="-1">Cascade Preload <a class="header-anchor" href="#cascade-preload" aria-label="Permalink to &quot;Cascade Preload&quot;">​</a></h2><p>preload selected fields of grand-children</p><p>e.g. for the following role and menu many2many relations</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Reply</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	global.MODEL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	Author        User         </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`json:&quot;author&quot; gorm:&quot;foreignKey:AuthorID&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	AuthorID      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">uint</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">         \`json:&quot;authorId&quot; gorm:&quot;comment:foreignKey&quot; binding:&quot;required&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	ReplyContent  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">       \`json:&quot;replyContent&quot; gorm:&quot;type:text;comment: reply content of article comment&quot; binding:&quot;required&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	ParentReplyID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*uint</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        \`json:&quot;parentReplyId&quot; gorm:&quot;default:0;comment: parent reply id if exist, otherwise is 0&quot; \`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	ParentReply   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Reply       </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`json:&quot;ParentReply&quot; gorm:&quot;comment: self-referential has one&quot; \`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>if we want to include reply&#39;s parent reply&#39;s author&#39;s username, we can do the following:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">db.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Table</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;replies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Preload</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;ParentReply.Author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(db </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">gorm.DB) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">gorm.DB {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> db.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Select</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;username,id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}).</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Find</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">replyList)</span></span></code></pre></div><p><em><strong>P.S</strong></em> always remember to select the foreign key, which in this case, is id (author&#39;s id), you can filter out the id field later if not required.</p>`,25);function E(s,q,b,_,f,w){const k=e("Badge"),r=d,o=e("ClientOnly");return n(),c("div",null,[h("h1",D,[i("Gorm Use Cases Sample Codes "),l(k,{text:"Gorm",type:"warning"}),i(),F]),l(o,null,{default:A(()=>{var a,t;return[(((a=s.$frontmatter)==null?void 0:a.aside)??!0)&&(((t=s.$frontmatter)==null?void 0:t.showArticleMetadata)??!0)?(n(),y(r,{key:0,article:s.$frontmatter},null,8,["article"])):u("",!0)]}),_:1}),m,i(" ##### SQL_CALC_FOUND_ROWS & FOUND_ROWS() If we want to paginate search result, the LIMIT keyword will restrict the number of result returned. However, we usually also want to return the total number of matching records, thus we use SQL_CALC_FOUND_ROWS & FOUND_ROWS() to avoid executing search query one more time. e.g. mysql ```sql SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name WHERE id > 100 LIMIT 10; SELECT FOUND_ROWS（） ``` after the first select statement, we can easily retrieve the total number of matching records by calling FOUND_ROWS（） function, which counted result without implementing LIMIT. "),B])}const I=g(C,[["render",E]]);export{R as __pageData,I as default};
